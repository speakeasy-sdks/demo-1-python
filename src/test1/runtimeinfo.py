"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from test1.models import operations, shared
from typing import Optional

class RuntimeInfo:
    r"""RuntimeInfo object returned by the runtime endpoint. Represents a list post statuses grouped by modules and controllers (deployments and stateful sets).
    <SchemaDefinition schemaRef=\"#/components/schemas/RuntimeInfoRequest\" />
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def get_orgs_org_id_apps_app_id_envs_env_id_runtime(self, request: operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeRequest) -> operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeResponse:
        r"""Get Runtime information about the environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/runtime', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RuntimeInfoResponse])
                res.runtime_info_response = out
        elif http_res.status_code in [404, 500]:
            pass

        return res

    
    def get_orgs_org_id_apps_app_id_runtime(self, request: operations.GetOrgsOrgIDAppsAppIDRuntimeRequest) -> operations.GetOrgsOrgIDAppsAppIDRuntimeResponse:
        r"""Get Runtime information about specific environments."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDRuntimeRequest, base_url, '/orgs/{orgId}/apps/{appId}/runtime', request)
        
        query_params = utils.get_query_params(operations.GetOrgsOrgIDAppsAppIDRuntimeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDRuntimeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.EnvironmentRuntimeInfoResponse]])
                res.environment_runtime_info_responses = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    
    def patch_orgs_org_id_apps_app_id_envs_env_id_runtime_replicas(self, request: operations.PatchOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeReplicasRequest) -> operations.PatchOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeReplicasResponse:
        r"""Set number of replicas for an environment's modules."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeReplicasRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/runtime/replicas', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeReplicasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def put_orgs_org_id_apps_app_id_envs_env_id_runtime_paused(self, request: operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDRuntimePausedRequest) -> operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDRuntimePausedResponse:
        r"""Pause / Resume an environment.
        On pause requests, all the Kubernetes Deployment resources are scaled down to 0 replicas.
        
        On resume requests, all the Kubernetes Deployment resources are scaled up to the number of replicas running before the environment was paused.
        
        When an environment is paused, it is not possible to:
        
        ```
          - Deploy the environment within Humanitec.
          - Scale the number of replicas running of any workload.
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDRuntimePausedRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/runtime/paused', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDRuntimePausedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    