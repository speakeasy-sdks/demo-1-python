"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from test1 import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AutomationRuleRequest:
    r"""An Automation Rule defining how and when artefacts in an environment should be updated."""
    
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Specifies the type of event. Currently, only updates to either branches or tags are supported. Must be `\\"update\\"`."""
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Whether the rule will be processed or not."""
    artefacts_filter: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('artefacts_filter'), 'exclude': lambda f: f is None }})
    r"""A list of artefact names to be processed by the rule. If the array is empty, it implies include all. If `exclude_artefacts_filter` is true, this list describes the artefacts to exclude."""
    exclude_artefacts_filter: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_artefacts_filter'), 'exclude': lambda f: f is None }})
    r"""Whether the artefacts specified in `artefacts_filter` should be excluded (true) or included (false) in the automation rule."""
    exclude_images_filter: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_images_filter'), 'exclude': lambda f: f is None }})
    r"""DEPRECATED: Whether the images specified in `images_filter` should be excluded (true) or included (false) in the automation rule."""
    images_filter: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images_filter'), 'exclude': lambda f: f is None }})
    r"""DEPRECATED: A list of image IDs to be processed by the rule. If the array is empty, it implies include all. If `exclude_images_filter` is true, this list describes images to exclude."""
    match: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('match'), 'exclude': lambda f: f is None }})
    r"""DEPRECATED: A regular expression applied to the branch or tag name depending on the value of `update_to`. Defaults to match all if omitted or empty."""
    match_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('match_ref'), 'exclude': lambda f: f is None }})
    r"""A regular expression applied to the ref of a new artefact version. Defaults to match all if omitted or empty."""
    update_to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('update_to'), 'exclude': lambda f: f is None }})
    r"""DEPRECATED: Specifies whether the update occurs on commit to branch or creation of tag. Must be one of `\\"branch\\"` or `\\"tag\\"`."""
    