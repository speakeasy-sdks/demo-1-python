"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import valuesource_enum as shared_valuesource_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from test1 import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ValueResponse:
    r"""Shared Values can be used to manage variables and configuration that might vary between environments. They are also the way that secrets can be stored securely.
    
    Shared Values are by default shared across all environments in an application. However, they can be overridden on an Environment by Environment basis.
    
    For example: There might be 2 API keys that are used in an application. One development key used in the development and staging environments and another used for production. The development API key would be set at the Application level. The value would then be overridden at the Environment level for the production Environment.
    """
    
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A Human friendly description of what the Shared Value is."""
    is_secret: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_secret') }})
    r"""Specified that the Shared Value contains a secret."""
    key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key') }})
    r"""The unique key by which the Shared Value can be referenced. pattern: ^[a-zA-Z0-9._-]+$."""
    secret_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret_key') }})
    r"""Location of the secret value in the secret store."""
    secret_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret_version') }})
    r"""Version of the current secret value as returned by the secret store."""
    source: shared_valuesource_enum.ValueSourceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source') }})
    r"""Source of the value, \\"app\\" for app level, \\"env\\" for app env level."""
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The value that will be stored. (Will be always empty for secrets.)"""
    