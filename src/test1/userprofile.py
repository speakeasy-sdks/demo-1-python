"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from test1.models import operations, shared
from typing import Any, Optional

class UserProfile:
    r"""UserProfile holds the profile information of a user
    <SchemaDefinition schemaRef=\"#/components/schemas/UserProfileRequest\" />
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def delete_tokens_token_id_(self, request: operations.DeleteTokensTokenIDRequest) -> operations.DeleteTokensTokenIDResponse:
        r"""DEPRECATED"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteTokensTokenIDRequest, base_url, '/tokens/{tokenId}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTokensTokenIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def get_current_user(self) -> operations.GetCurrentUserResponse:
        r"""Gets the extended profile of the current user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/current-user'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCurrentUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserProfileExtendedResponse])
                res.user_profile_extended_response = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    
    def get_tokens(self) -> operations.GetTokensResponse:
        r"""DEPRECATED"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tokens'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTokensResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_tokens_200_application_json_object = out

        return res

    
    def get_users_me(self) -> operations.GetUsersMeResponse:
        r"""DEPRECATED"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users/me'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersMeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_users_me_200_application_json_object = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    
    def patch_current_user(self, request: shared.UserProfileExtendedRequest) -> operations.PatchCurrentUserResponse:
        r"""Updates the extended profile of the current user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/current-user'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchCurrentUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserProfileExtendedResponse])
                res.user_profile_extended_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    
    def post_orgs_org_id_users(self, request: operations.PostOrgsOrgIDUsersRequest) -> operations.PostOrgsOrgIDUsersResponse:
        r"""Creates a new service user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDUsersRequest, base_url, '/orgs/{orgId}/users', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "new_service_user_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserProfileExtendedResponse])
                res.user_profile_extended_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code in [403, 422]:
            pass

        return res

    