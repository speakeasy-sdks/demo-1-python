"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from test_1.models import operations, shared
from typing import Optional

class UserRole:
    r"""UserRole holds the mapping of role to user for a particular object.
    <SchemaDefinition schemaRef=\"#/components/schemas/UserRoleRequest\" />
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def delete_orgs_org_id_apps_app_id_users_user_id_(self, request: operations.DeleteOrgsOrgIDAppsAppIDUsersUserIDRequest) -> operations.DeleteOrgsOrgIDAppsAppIDUsersUserIDResponse:
        r"""Remove the role of a User on an Application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDUsersUserIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/users/{userId}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 404]:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def delete_orgs_org_id_env_types_env_type_users_user_id_(self, request: operations.DeleteOrgsOrgIDEnvTypesEnvTypeUsersUserIDRequest) -> operations.DeleteOrgsOrgIDEnvTypesEnvTypeUsersUserIDResponse:
        r"""Remove the role of a User on an Environment Type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDEnvTypesEnvTypeUsersUserIDRequest, base_url, '/orgs/{orgId}/env-types/{envType}/users/{userId}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDEnvTypesEnvTypeUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 404]:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def delete_orgs_org_id_users_user_id_(self, request: operations.DeleteOrgsOrgIDUsersUserIDRequest) -> operations.DeleteOrgsOrgIDUsersUserIDResponse:
        r"""Remove the role of a User on an Organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDUsersUserIDRequest, base_url, '/orgs/{orgId}/users/{userId}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 404]:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_apps_app_id_users(self, request: operations.GetOrgsOrgIDAppsAppIDUsersRequest) -> operations.GetOrgsOrgIDAppsAppIDUsersResponse:
        r"""List Users with roles in an App"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDUsersRequest, base_url, '/orgs/{orgId}/apps/{appId}/users', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UserRoleResponse]])
                res.user_role_responses = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def get_orgs_org_id_apps_app_id_users_user_id_(self, request: operations.GetOrgsOrgIDAppsAppIDUsersUserIDRequest) -> operations.GetOrgsOrgIDAppsAppIDUsersUserIDResponse:
        r"""Get the role of a User on an Application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDUsersUserIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/users/{userId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def get_orgs_org_id_env_types_env_type_users_user_id_(self, request: operations.GetOrgsOrgIDEnvTypesEnvTypeUsersUserIDRequest) -> operations.GetOrgsOrgIDEnvTypesEnvTypeUsersUserIDResponse:
        r"""Get the role of a User on an Environment Type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDEnvTypesEnvTypeUsersUserIDRequest, base_url, '/orgs/{orgId}/env-types/{envType}/users/{userId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDEnvTypesEnvTypeUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def get_orgs_org_id_users(self, request: operations.GetOrgsOrgIDUsersRequest) -> operations.GetOrgsOrgIDUsersResponse:
        r"""List Users with roles in an Organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDUsersRequest, base_url, '/orgs/{orgId}/users', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UserRoleResponse]])
                res.user_role_responses = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def get_orgs_org_id_users_user_id_(self, request: operations.GetOrgsOrgIDUsersUserIDRequest) -> operations.GetOrgsOrgIDUsersUserIDResponse:
        r"""Get the role of a User on an Organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDUsersUserIDRequest, base_url, '/orgs/{orgId}/users/{userId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def patch_orgs_org_id_apps_app_id_users_user_id_(self, request: operations.PatchOrgsOrgIDAppsAppIDUsersUserIDRequest) -> operations.PatchOrgsOrgIDAppsAppIDUsersUserIDResponse:
        r"""Update the role of a User on an Application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDAppsAppIDUsersUserIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/users/{userId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDAppsAppIDUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def patch_orgs_org_id_env_types_env_type_users_user_id_(self, request: operations.PatchOrgsOrgIDEnvTypesEnvTypeUsersUserIDRequest) -> operations.PatchOrgsOrgIDEnvTypesEnvTypeUsersUserIDResponse:
        r"""Update the role of a User on an Environment Type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDEnvTypesEnvTypeUsersUserIDRequest, base_url, '/orgs/{orgId}/env-types/{envType}/users/{userId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDEnvTypesEnvTypeUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def patch_orgs_org_id_users_user_id_(self, request: operations.PatchOrgsOrgIDUsersUserIDRequest) -> operations.PatchOrgsOrgIDUsersUserIDResponse:
        r"""Update the role of a User on an Organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDUsersUserIDRequest, base_url, '/orgs/{orgId}/users/{userId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def post_orgs_org_id_apps_app_id_users(self, request: operations.PostOrgsOrgIDAppsAppIDUsersRequest) -> operations.PostOrgsOrgIDAppsAppIDUsersResponse:
        r"""Adds a User to an Application with a Role"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDUsersRequest, base_url, '/orgs/{orgId}/apps/{appId}/users', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_role_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code in [404, 422]:
            pass

        return res

    
    def post_orgs_org_id_env_types_env_type_users(self, request: operations.PostOrgsOrgIDEnvTypesEnvTypeUsersRequest) -> operations.PostOrgsOrgIDEnvTypesEnvTypeUsersResponse:
        r"""Adds a User to an Environment Type with a Role"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDEnvTypesEnvTypeUsersRequest, base_url, '/orgs/{orgId}/env-types/{envType}/users', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_role_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDEnvTypesEnvTypeUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def post_orgs_org_id_invitations(self, request: operations.PostOrgsOrgIDInvitationsRequest) -> operations.PostOrgsOrgIDInvitationsResponse:
        r"""Invites a user to an Organization with a specified role."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDInvitationsRequest, base_url, '/orgs/{orgId}/invitations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_invite_request_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDInvitationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UserRoleResponse]])
                res.user_role_responses = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    