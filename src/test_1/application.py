"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from test_1.models import operations, shared
from typing import Optional

class Application:
    r"""An Application is a collection of Workloads that work together. When deployed, all Workloads in an Application are deployed to the same namespace.
    
    Apps are the root of the configuration tree holding Environments, Deployments, Shared Values, and Secrets.
    <SchemaDefinition schemaRef=\"#/components/schemas/ApplicationRequest\" />
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def delete_orgs_org_id_apps_app_id_(self, request: operations.DeleteOrgsOrgIDAppsAppIDRequest) -> operations.DeleteOrgsOrgIDAppsAppIDResponse:
        r"""Delete an Application
        Deleting an Application will also delete everything associated with it. This includes Environments, Deployment history on those Environments, and any shared values and secrets associated.
        
        _Deletions are currently irreversible._
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDRequest, base_url, '/orgs/{orgId}/apps/{appId}', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_apps(self, request: operations.GetOrgsOrgIDAppsRequest) -> operations.GetOrgsOrgIDAppsResponse:
        r"""List all Applications in an Organization.
        Listing or lists of all Applications that exist within a specific Organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsRequest, base_url, '/orgs/{orgId}/apps', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ApplicationResponse]])
                res.application_responses = out

        return res

    
    def get_orgs_org_id_apps_app_id_(self, request: operations.GetOrgsOrgIDAppsAppIDRequest) -> operations.GetOrgsOrgIDAppsAppIDResponse:
        r"""Get an existing Application
        Gets a specific Application in the specified Organization by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDRequest, base_url, '/orgs/{orgId}/apps/{appId}', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApplicationResponse])
                res.application_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_apps(self, request: operations.PostOrgsOrgIDAppsRequest) -> operations.PostOrgsOrgIDAppsResponse:
        r"""Add a new Application to an Organization
        Creates a new Application, then adds it to the specified Organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsRequest, base_url, '/orgs/{orgId}/apps', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "application_creation_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApplicationResponse])
                res.application_response = out
        elif http_res.status_code in [400, 401, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    