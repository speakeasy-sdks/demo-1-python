"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from test_1 import utils
from test_1.models import operations, shared
from typing import Any, Optional

class Set:
    r"""A Deployment Set (or just \\"Set\\") defines all of the non-Environment specific configuration for Modules and External Resources. Each of these Modules or External Resources has a unique name.
    
    Deployment Sets are immutable and their ID is a cryptographic hash of their content. This means that a Deployment Set can be globally identified based on its ID. It also means that referencing a Deployment Set by ID will always return the same Deployment Set.
    
    Deployment Sets cannot be created directly, instead they are created by applying a Deployment Delta to an existing Deployment Set.
    
    **Basic Structure**
    
    ```
     {
       \"id\": <ID of the Deployment Set>,
       \"modules\" : {
         <ID of Module> : {
           \"profile\": <Defines how the optional \"spec\" property is interpreted>
           \"spec\": {
             <Properties that depend on the \"profile\" property.>
           }
           \"externals\": {
             <External Resource Name> : {
               \"type\": <Resource Type>,
               \"params\": {
                 <Properties which parametrize the resource depending on the Resource Type.>
               }
             }
           }
         }
       }
     }
    ```
    
    For details about how the Humanitec provided profiles work, see (Deployment Set Profiles)[].
    <SchemaDefinition schemaRef=\"#/components/schemas/SetRequest\" />
    """
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def get_sets(self, request: operations.GetSetsRequest) -> operations.GetSetsResponse:
        r"""Get all Deployment Sets"""
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetSetsRequest, base_url, '/orgs/{orgId}/apps/{appId}/sets', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SetResponse]])
                res.set_responses = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.get_sets_404_application_json_string = http_res.content

        return res

    
    def get_orgs_org_id_apps_app_id_sets_set_id_(self, request: operations.GetOrgsOrgIDAppsAppIDSetsSetIDRequest) -> operations.GetOrgsOrgIDAppsAppIDSetsSetIDResponse:
        r"""Get a Deployment Set"""
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDSetsSetIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/sets/{setId}', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetOrgsOrgIDAppsAppIDSetsSetIDRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDSetsSetIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_orgs_org_id_apps_app_id_sets_set_id_200_application_json_one_of = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.get_orgs_org_id_apps_app_id_sets_set_id_404_application_json_string = http_res.content

        return res

    
    def get_orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_(self, request: operations.GetOrgsOrgIDAppsAppIDSetsSetIDDiffSourceSetIDRequest) -> operations.GetOrgsOrgIDAppsAppIDSetsSetIDDiffSourceSetIDResponse:
        r"""Get the difference between 2 Deployment Sets"""
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDSetsSetIDDiffSourceSetIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/sets/{setId}/diff/{sourceSetId}', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDSetsSetIDDiffSourceSetIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlainDeltaResponse])
                res.plain_delta_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.get_orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_404_application_json_string = http_res.content

        return res

    
    def post_orgs_org_id_apps_app_id_sets_set_id_(self, request: operations.PostOrgsOrgIDAppsAppIDSetsSetIDRequest) -> operations.PostOrgsOrgIDAppsAppIDSetsSetIDResponse:
        r"""Apply a Deployment Delta to a Deployment Set"""
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDSetsSetIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/sets/{setId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "delta_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, application/json;q=0.7, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDSetsSetIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.post_orgs_org_id_apps_app_id_sets_set_id_200_application_json_string = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.post_orgs_org_id_apps_app_id_sets_set_id_404_application_json_string = http_res.content

        return res

    