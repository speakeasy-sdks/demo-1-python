"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from test_1.models import operations, shared
from typing import Optional

class ResourceDefinition:
    r"""A Resource Definitions describes how and when a resource should be provisioned. It links a driver (the how) along with a Matching Criteria (the when) to a Resource Type. This allows Humanitec to invoke a particular driver for the required Resource Type in the context of a particular Application and Environment.
    
    The schema for the `driver_inputs` is defined by the `input_schema` property on the DriverDefinition identified by the `driver_type` property.
    <SchemaDefinition schemaRef=\"#/components/schemas/ResourceDefinitionRequest\" />
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def delete_orgs_org_id_resources_defs_def_id_(self, request: operations.DeleteOrgsOrgIDResourcesDefsDefIDRequest) -> operations.DeleteOrgsOrgIDResourcesDefsDefIDResponse:
        r"""Delete a Resource Definition.
        If there **are no** Active Resources provisioned via the current definition, the Resource Definition is deleted immediately.
        
        If there **are** Active Resources provisioned via the current definition, the request fails. The response will describe the changes to the affected Active Resources if operation is forced.
        
        The request can take an optional `force` query parameter. If set to `true`, the current Resource Definition is **marked as** pending deletion and will be deleted (purged) as soon as no existing Active Resources reference it. With the next deployment matching criteria for Resources will be re-evaluated, and current Active Resources for the target environment would be either linked to another matching Resource Definition or decommissioned and created using the new or default Resource Definition (when available).
        
        The Resource Definition that has been marked for deletion cannot be used to provision new resources.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDResourcesDefsDefIDRequest, base_url, '/orgs/{orgId}/resources/defs/{defId}', request)
        headers = {}
        query_params = utils.get_query_params(operations.DeleteOrgsOrgIDResourcesDefsDefIDRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDResourcesDefsDefIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ResourceDefinitionChangeResponse]])
                res.resource_definition_change_responses = out

        return res

    
    def delete_orgs_org_id_resources_defs_def_id_criteria_criteria_id_(self, request: operations.DeleteOrgsOrgIDResourcesDefsDefIDCriteriaCriteriaIDRequest) -> operations.DeleteOrgsOrgIDResourcesDefsDefIDCriteriaCriteriaIDResponse:
        r"""Delete a Matching Criteria from a Resource Definition.
        If there **are no** Active Resources that would match to a different Resource Definition when the current Matching Criteria is deleted, the Matching Criteria is deleted immediately.
        
        If there **are** Active Resources that would match to a different Resource Definition, the request fails with HTTP status code 409 (Conflict). The response content will list all of affected Active Resources and their new matches.
        
        The request can take an optional `force` query parameter. If set to `true`, the Matching Criteria is deleted immediately. Referenced Active Resources would match to a different Resource Definition during the next deployment in the target environment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDResourcesDefsDefIDCriteriaCriteriaIDRequest, base_url, '/orgs/{orgId}/resources/defs/{defId}/criteria/{criteriaId}', request)
        headers = {}
        query_params = utils.get_query_params(operations.DeleteOrgsOrgIDResourcesDefsDefIDCriteriaCriteriaIDRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0.7, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDResourcesDefsDefIDCriteriaCriteriaIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.delete_orgs_org_id_resources_defs_def_id_criteria_criteria_id_404_application_json_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ResourceDefinitionChangeResponse]])
                res.resource_definition_change_responses = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_resources_defs(self, request: operations.GetOrgsOrgIDResourcesDefsRequest) -> operations.GetOrgsOrgIDResourcesDefsResponse:
        r"""List Resource Definitions.
        Filter criteria can be applied to obtain all the resource definitions that could match the filters, grouped by type and sorted by matching rank.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDResourcesDefsRequest, base_url, '/orgs/{orgId}/resources/defs', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetOrgsOrgIDResourcesDefsRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDResourcesDefsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ResourceDefinitionResponse]])
                res.resource_definition_responses = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_resources_defs_def_id_(self, request: operations.GetOrgsOrgIDResourcesDefsDefIDRequest) -> operations.GetOrgsOrgIDResourcesDefsDefIDResponse:
        r"""Get a specific Resource Definition."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDResourcesDefsDefIDRequest, base_url, '/orgs/{orgId}/resources/defs/{defId}', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDResourcesDefsDefIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceDefinitionResponse])
                res.resource_definition_response = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_resources_defs_def_id_resources(self, request: operations.GetOrgsOrgIDResourcesDefsDefIDResourcesRequest) -> operations.GetOrgsOrgIDResourcesDefsDefIDResourcesResponse:
        r"""List Active Resources provisioned via a specific Resource Definition."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDResourcesDefsDefIDResourcesRequest, base_url, '/orgs/{orgId}/resources/defs/{defId}/resources', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDResourcesDefsDefIDResourcesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ActiveResourceResponse]])
                res.active_resource_responses = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def patch_orgs_org_id_resources_defs_def_id_(self, request: operations.PatchOrgsOrgIDResourcesDefsDefIDRequest) -> operations.PatchOrgsOrgIDResourcesDefsDefIDResponse:
        r"""Update a Resource Definition."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDResourcesDefsDefIDRequest, base_url, '/orgs/{orgId}/resources/defs/{defId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "patch_resource_definition_request_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDResourcesDefsDefIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceDefinitionResponse])
                res.resource_definition_response = out
        elif http_res.status_code in [400, 404, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_resources_defs(self, request: operations.PostOrgsOrgIDResourcesDefsRequest) -> operations.PostOrgsOrgIDResourcesDefsResponse:
        r"""Create a new Resource Definition."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDResourcesDefsRequest, base_url, '/orgs/{orgId}/resources/defs', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_resource_definition_request_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDResourcesDefsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceDefinitionResponse])
                res.resource_definition_response = out
        elif http_res.status_code in [400, 409, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_resources_defs_def_id_criteria(self, request: operations.PostOrgsOrgIDResourcesDefsDefIDCriteriaRequest) -> operations.PostOrgsOrgIDResourcesDefsDefIDCriteriaResponse:
        r"""Add a new Matching Criteria to a Resource Definition.
        Matching Criteria are combined with Resource Type to select a specific definition. Matching Criteria can be set for any combination of Application ID, Environment ID, Environment Type, and Resource ID. In the event of multiple matches, the most specific match is chosen.
        
        For example, given 3 sets of matching criteria for the same type:
        
        ```
         1. {\"env_type\":\"test\"}
         2. {\"env_type\":\"development\"}
         3. {\"env_type\":\"test\", \"app_id\":\"my-app\"}
        ```
        
        If, a resource of that time was needed in an Application `my-app`, Environment `qa-team` with Type `test` and Resource ID `modules.my-module-externals.my-resource`, there would be two resources definitions matching the criteria: #1 & #3. Definition #3 will be chosen because it's matching criteria is the most specific.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDResourcesDefsDefIDCriteriaRequest, base_url, '/orgs/{orgId}/resources/defs/{defId}/criteria', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "matching_criteria_rule_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDResourcesDefsDefIDCriteriaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MatchingCriteriaResponse])
                res.matching_criteria_response = out
        elif http_res.status_code in [400, 409, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def put_orgs_org_id_resources_defs_def_id_(self, request: operations.PutOrgsOrgIDResourcesDefsDefIDRequest) -> operations.PutOrgsOrgIDResourcesDefsDefIDResponse:
        r"""Update a Resource Definition."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrgsOrgIDResourcesDefsDefIDRequest, base_url, '/orgs/{orgId}/resources/defs/{defId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_resource_definition_request_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrgsOrgIDResourcesDefsDefIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceDefinitionResponse])
                res.resource_definition_response = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    