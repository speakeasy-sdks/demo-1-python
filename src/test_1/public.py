"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from test_1.models import operations, shared
from typing import Any, Optional

class Public:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def delete_orgs_org_id_apps_app_id_(self, request: operations.DeleteOrgsOrgIDAppsAppIDRequest) -> operations.DeleteOrgsOrgIDAppsAppIDResponse:
        r"""Delete an Application
        Deleting an Application will also delete everything associated with it. This includes Environments, Deployment history on those Environments, and any shared values and secrets associated.
        
        _Deletions are currently irreversible._
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDRequest, base_url, '/orgs/{orgId}/apps/{appId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def delete_orgs_org_id_apps_app_id_envs_env_id_(self, request: operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDRequest) -> operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDResponse:
        r"""Delete a specific Environment.
        Deletes a specific Environment in an Application.
        
        Deleting an Environment will also delete the Deployment history of the Environment.
        
        _Deletions are currently irreversible._
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def delete_orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_(self, request: operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDResourcesTypeResIDRequest) -> operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDResourcesTypeResIDResponse:
        r"""Delete Active Resources."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDResourcesTypeResIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/resources/{type}/{resId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDResourcesTypeResIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def delete_orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_(self, request: operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDRulesRuleIDRequest) -> operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDRulesRuleIDResponse:
        r"""Delete Automation Rule from an Environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDRulesRuleIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/rules/{ruleId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDRulesRuleIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def delete_orgs_org_id_apps_app_id_envs_env_id_values(self, request: operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDValuesRequest) -> operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDValuesResponse:
        r"""Delete all Shared Value for an Environment
        All Shared Values will be deleted. If the Shared Values are marked as a secret, they will also be deleted.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDValuesRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/values', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDValuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def delete_orgs_org_id_apps_app_id_envs_env_id_values_key_(self, request: operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDValuesKeyRequest) -> operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDValuesKeyResponse:
        r"""Delete Shared Value for an Environment
        The specified Shared Value will be permanently deleted. If the Shared Value is marked as a secret, it will also be permanently deleted.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDValuesKeyRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/values/{key}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDEnvsEnvIDValuesKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def delete_orgs_org_id_apps_app_id_jobs(self, request: operations.DeleteOrgsOrgIDAppsAppIDJobsRequest) -> operations.DeleteOrgsOrgIDAppsAppIDJobsResponse:
        r"""Deletes all Jobs for the Application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDJobsRequest, base_url, '/orgs/{orgId}/apps/{appId}/jobs', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDJobsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def delete_orgs_org_id_apps_app_id_users_user_id_(self, request: operations.DeleteOrgsOrgIDAppsAppIDUsersUserIDRequest) -> operations.DeleteOrgsOrgIDAppsAppIDUsersUserIDResponse:
        r"""Remove the role of a User on an Application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDUsersUserIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/users/{userId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 404]:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def delete_orgs_org_id_apps_app_id_values(self, request: operations.DeleteOrgsOrgIDAppsAppIDValuesRequest) -> operations.DeleteOrgsOrgIDAppsAppIDValuesResponse:
        r"""Delete all Shared Value for an App
        All Shared Values will be deleted. If the Shared Values are marked as a secret, they will also be deleted.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDValuesRequest, base_url, '/orgs/{orgId}/apps/{appId}/values', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDValuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def delete_orgs_org_id_apps_app_id_values_key_(self, request: operations.DeleteOrgsOrgIDAppsAppIDValuesKeyRequest) -> operations.DeleteOrgsOrgIDAppsAppIDValuesKeyResponse:
        r"""Delete Shared Value for an Application
        The specified Shared Value will be permanently deleted. If the Shared Value is marked as a secret, it will also be permanently deleted.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDValuesKeyRequest, base_url, '/orgs/{orgId}/apps/{appId}/values/{key}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDValuesKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def delete_orgs_org_id_apps_app_id_webhooks_job_id_(self, request: operations.DeleteOrgsOrgIDAppsAppIDWebhooksJobIDRequest) -> operations.DeleteOrgsOrgIDAppsAppIDWebhooksJobIDResponse:
        r"""Delete a Webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDWebhooksJobIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/webhooks/{jobId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDWebhooksJobIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def delete_orgs_org_id_artefacts_artefact_id_(self, request: operations.DeleteOrgsOrgIDArtefactsArtefactIDRequest) -> operations.DeleteOrgsOrgIDArtefactsArtefactIDResponse:
        r"""Delete Artefact and all related Artefact Versions
        The specified Artefact and its Artefact Versions will be permanently deleted. Only Administrators can delete an Artefact.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDArtefactsArtefactIDRequest, base_url, '/orgs/{orgId}/artefacts/{artefactId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDArtefactsArtefactIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def delete_orgs_org_id_env_types_env_type_id_(self, request: operations.DeleteOrgsOrgIDEnvTypesEnvTypeIDRequest) -> operations.DeleteOrgsOrgIDEnvTypesEnvTypeIDResponse:
        r"""Deletes an Environment Type
        Deletes a specific Environment Type from an Organization. If there are Environments with this Type in the Organization, the operation will fail.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDEnvTypesEnvTypeIDRequest, base_url, '/orgs/{orgId}/env-types/{envTypeId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDEnvTypesEnvTypeIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnvironmentTypeResponse])
                res.environment_type_response = out
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, str]]])
                res.delete_orgs_org_id_env_types_env_type_id_409_application_json_objects = out

        return res

    
    def delete_orgs_org_id_env_types_env_type_users_user_id_(self, request: operations.DeleteOrgsOrgIDEnvTypesEnvTypeUsersUserIDRequest) -> operations.DeleteOrgsOrgIDEnvTypesEnvTypeUsersUserIDResponse:
        r"""Remove the role of a User on an Environment Type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDEnvTypesEnvTypeUsersUserIDRequest, base_url, '/orgs/{orgId}/env-types/{envType}/users/{userId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDEnvTypesEnvTypeUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 404]:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def delete_orgs_org_id_registries_reg_id_(self, request: operations.DeleteOrgsOrgIDRegistriesRegIDRequest) -> operations.DeleteOrgsOrgIDRegistriesRegIDResponse:
        r"""Deletes an existing registry record and all associated credentials and secrets.
        _Deletions are currently irreversible._
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDRegistriesRegIDRequest, base_url, '/orgs/{orgId}/registries/{regId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDRegistriesRegIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorInfoResponse])
                res.error_info_response = out

        return res

    
    def delete_orgs_org_id_resources_defs_def_id_(self, request: operations.DeleteOrgsOrgIDResourcesDefsDefIDRequest) -> operations.DeleteOrgsOrgIDResourcesDefsDefIDResponse:
        r"""Delete a Resource Definition.
        If there **are no** Active Resources provisioned via the current definition, the Resource Definition is deleted immediately.
        
        If there **are** Active Resources provisioned via the current definition, the request fails. The response will describe the changes to the affected Active Resources if operation is forced.
        
        The request can take an optional `force` query parameter. If set to `true`, the current Resource Definition is **marked as** pending deletion and will be deleted (purged) as soon as no existing Active Resources reference it. With the next deployment matching criteria for Resources will be re-evaluated, and current Active Resources for the target environment would be either linked to another matching Resource Definition or decommissioned and created using the new or default Resource Definition (when available).
        
        The Resource Definition that has been marked for deletion cannot be used to provision new resources.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDResourcesDefsDefIDRequest, base_url, '/orgs/{orgId}/resources/defs/{defId}', request)
        headers = {}
        query_params = utils.get_query_params(operations.DeleteOrgsOrgIDResourcesDefsDefIDRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDResourcesDefsDefIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ResourceDefinitionChangeResponse]])
                res.resource_definition_change_responses = out

        return res

    
    def delete_orgs_org_id_resources_defs_def_id_criteria_criteria_id_(self, request: operations.DeleteOrgsOrgIDResourcesDefsDefIDCriteriaCriteriaIDRequest) -> operations.DeleteOrgsOrgIDResourcesDefsDefIDCriteriaCriteriaIDResponse:
        r"""Delete a Matching Criteria from a Resource Definition.
        If there **are no** Active Resources that would match to a different Resource Definition when the current Matching Criteria is deleted, the Matching Criteria is deleted immediately.
        
        If there **are** Active Resources that would match to a different Resource Definition, the request fails with HTTP status code 409 (Conflict). The response content will list all of affected Active Resources and their new matches.
        
        The request can take an optional `force` query parameter. If set to `true`, the Matching Criteria is deleted immediately. Referenced Active Resources would match to a different Resource Definition during the next deployment in the target environment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDResourcesDefsDefIDCriteriaCriteriaIDRequest, base_url, '/orgs/{orgId}/resources/defs/{defId}/criteria/{criteriaId}', request)
        headers = {}
        query_params = utils.get_query_params(operations.DeleteOrgsOrgIDResourcesDefsDefIDCriteriaCriteriaIDRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDResourcesDefsDefIDCriteriaCriteriaIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.delete_orgs_org_id_resources_defs_def_id_criteria_criteria_id_404_application_json_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ResourceDefinitionChangeResponse]])
                res.resource_definition_change_responses = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def delete_orgs_org_id_resources_drivers_driver_id_(self, request: operations.DeleteOrgsOrgIDResourcesDriversDriverIDRequest) -> operations.DeleteOrgsOrgIDResourcesDriversDriverIDResponse:
        r"""Delete a Resources Driver."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDResourcesDriversDriverIDRequest, base_url, '/orgs/{orgId}/resources/drivers/{driverId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDResourcesDriversDriverIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def delete_orgs_org_id_users_user_id_(self, request: operations.DeleteOrgsOrgIDUsersUserIDRequest) -> operations.DeleteOrgsOrgIDUsersUserIDResponse:
        r"""Remove the role of a User on an Organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDUsersUserIDRequest, base_url, '/orgs/{orgId}/users/{userId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 404]:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def delete_orgs_org_id_workload_profiles_profile_id_versions_version_(self, request: operations.DeleteOrgsOrgIDWorkloadProfilesProfileIDVersionsVersionRequest) -> operations.DeleteOrgsOrgIDWorkloadProfilesProfileIDVersionsVersionResponse:
        r"""Delete a Workload Profile Version"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDWorkloadProfilesProfileIDVersionsVersionRequest, base_url, '/orgs/{orgId}/workload-profiles/{profileId}/versions/{version}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDWorkloadProfilesProfileIDVersionsVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def delete_orgs_org_id_workload_profiles_profile_qid_(self, request: operations.DeleteOrgsOrgIDWorkloadProfilesProfileQidRequest) -> operations.DeleteOrgsOrgIDWorkloadProfilesProfileQidResponse:
        r"""Delete a Workload Profile
        This will also delete all versions of a workload profile.
        
        It is not possible to delete profiles of other organizations.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDWorkloadProfilesProfileQidRequest, base_url, '/orgs/{orgId}/workload-profiles/{profileQid}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDWorkloadProfilesProfileQidResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def delete_tokens_token_id_(self, request: operations.DeleteTokensTokenIDRequest) -> operations.DeleteTokensTokenIDResponse:
        r"""DEPRECATED"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteTokensTokenIDRequest, base_url, '/tokens/{tokenId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTokensTokenIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def get_delta(self, request: operations.GetDeltaRequest) -> operations.GetDeltaResponse:
        r"""Fetch an existing Delta"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeltaRequest, base_url, '/orgs/{orgId}/apps/{appId}/deltas/{deltaId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeltaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeltaResponse])
                res.delta_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.get_delta_404_application_json_string = http_res.content

        return res

    
    def get_sets(self, request: operations.GetSetsRequest) -> operations.GetSetsResponse:
        r"""Get all Deployment Sets"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetsRequest, base_url, '/orgs/{orgId}/apps/{appId}/sets', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SetResponse]])
                res.set_responses = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.get_sets_404_application_json_string = http_res.content

        return res

    
    def get_current_user(self) -> operations.GetCurrentUserResponse:
        r"""Gets the extended profile of the current user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/current-user'
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCurrentUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserProfileExtendedResponse])
                res.user_profile_extended_response = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    
    def get_orgs(self) -> operations.GetOrgsResponse:
        r"""List active organizations the user has access to."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/orgs'
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OrganizationResponse]])
                res.organization_responses = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    
    def get_orgs_org_id_(self, request: operations.GetOrgsOrgIDRequest) -> operations.GetOrgsOrgIDResponse:
        r"""Get the specified Organization."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDRequest, base_url, '/orgs/{orgId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrganizationResponse])
                res.organization_response = out
        elif http_res.status_code in [400, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorInfoResponse])
                res.error_info_response = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    
    def get_orgs_org_id_apps(self, request: operations.GetOrgsOrgIDAppsRequest) -> operations.GetOrgsOrgIDAppsResponse:
        r"""List all Applications in an Organization.
        Listing or lists of all Applications that exist within a specific Organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsRequest, base_url, '/orgs/{orgId}/apps', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ApplicationResponse]])
                res.application_responses = out

        return res

    
    def get_orgs_org_id_apps_app_id_(self, request: operations.GetOrgsOrgIDAppsAppIDRequest) -> operations.GetOrgsOrgIDAppsAppIDResponse:
        r"""Get an existing Application
        Gets a specific Application in the specified Organization by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDRequest, base_url, '/orgs/{orgId}/apps/{appId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApplicationResponse])
                res.application_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_apps_app_id_deltas(self, request: operations.GetOrgsOrgIDAppsAppIDDeltasRequest) -> operations.GetOrgsOrgIDAppsAppIDDeltasResponse:
        r"""List Deltas in an Application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDDeltasRequest, base_url, '/orgs/{orgId}/apps/{appId}/deltas', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetOrgsOrgIDAppsAppIDDeltasRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDDeltasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DeltaResponse]])
                res.delta_responses = out

        return res

    
    def get_orgs_org_id_apps_app_id_envs(self, request: operations.GetOrgsOrgIDAppsAppIDEnvsRequest) -> operations.GetOrgsOrgIDAppsAppIDEnvsResponse:
        r"""List all Environments.
        Lists all of the Environments in the Application.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDEnvsRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDEnvsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.EnvironmentResponse]])
                res.environment_responses = out

        return res

    
    def get_orgs_org_id_apps_app_id_envs_env_id_(self, request: operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRequest) -> operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDResponse:
        r"""Get a specific Environment.
        Gets a specific Environment in an Application.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnvironmentResponse])
                res.environment_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_apps_app_id_envs_env_id_deploys(self, request: operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDDeploysRequest) -> operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDDeploysResponse:
        r"""List Deployments in an Environment.
        List all of the Deployments that have been carried out in the current Environment. Deployments are returned with the newest first.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDDeploysRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDDeploysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DeploymentResponse]])
                res.deployment_responses = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_(self, request: operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDDeploysDeployIDRequest) -> operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDDeploysDeployIDResponse:
        r"""Get a specific Deployment.
        Gets a specific Deployment in an Application and an Environment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDDeploysDeployIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys/{deployId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDDeploysDeployIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeploymentResponse])
                res.deployment_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors(self, request: operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDDeploysDeployIDErrorsRequest) -> operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDDeploysDeployIDErrorsResponse:
        r"""List errors that occurred in a Deployment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDDeploysDeployIDErrorsRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys/{deployId}/errors', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDDeploysDeployIDErrorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DeploymentErrorResponse]])
                res.deployment_error_responses = out

        return res

    
    def get_orgs_org_id_apps_app_id_envs_env_id_resources(self, request: operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDResourcesRequest) -> operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDResourcesResponse:
        r"""List Active Resources provisioned in an environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDResourcesRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/resources', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDResourcesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ActiveResourceResponse]])
                res.active_resource_responses = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_apps_app_id_envs_env_id_rules(self, request: operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRulesRequest) -> operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRulesResponse:
        r"""List all Automation Rules in an Environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRulesRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/rules', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AutomationRuleResponse]])
                res.automation_rule_responses = out
        elif http_res.status_code == 500:
            pass

        return res

    
    def get_orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_(self, request: operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRulesRuleIDRequest) -> operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRulesRuleIDResponse:
        r"""Get a specific Automation Rule for an Environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRulesRuleIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/rules/{ruleId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRulesRuleIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutomationRuleResponse])
                res.automation_rule_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def get_orgs_org_id_apps_app_id_envs_env_id_runtime(self, request: operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeRequest) -> operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeResponse:
        r"""Get Runtime information about the environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/runtime', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RuntimeInfoResponse])
                res.runtime_info_response = out
        elif http_res.status_code in [404, 500]:
            pass

        return res

    
    def get_orgs_org_id_apps_app_id_envs_env_id_value_set_versions(self, request: operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsRequest) -> operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsResponse:
        r"""List Value Set Versions in an Environment of an App
        A new Value Set Version is created on every modification of a Value inside the an Environment of an App. In case this environment has no overrides the response is the same as the App level endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ValueSetVersionResponse]])
                res.value_set_version_responses = out

        return res

    
    def get_orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_(self, request: operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDRequest) -> operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDResponse:
        r"""Get a single Value Set Version in an Environment of an App"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions/{valueSetVersionId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueSetVersionResponse])
                res.value_set_version_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_apps_app_id_envs_env_id_values(self, request: operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDValuesRequest) -> operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDValuesResponse:
        r"""List Shared Values in an Environment
        The returned values will be the base Application values with the Environment overrides where applicable. The `source` field will specify the level from which the value is from.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDValuesRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/values', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDEnvsEnvIDValuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ValueResponse]])
                res.value_responses = out

        return res

    
    def get_orgs_org_id_apps_app_id_runtime(self, request: operations.GetOrgsOrgIDAppsAppIDRuntimeRequest) -> operations.GetOrgsOrgIDAppsAppIDRuntimeResponse:
        r"""Get Runtime information about specific environments."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDRuntimeRequest, base_url, '/orgs/{orgId}/apps/{appId}/runtime', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetOrgsOrgIDAppsAppIDRuntimeRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDRuntimeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.EnvironmentRuntimeInfoResponse]])
                res.environment_runtime_info_responses = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    
    def get_orgs_org_id_apps_app_id_sets_set_id_(self, request: operations.GetOrgsOrgIDAppsAppIDSetsSetIDRequest) -> operations.GetOrgsOrgIDAppsAppIDSetsSetIDResponse:
        r"""Get a Deployment Set"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDSetsSetIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/sets/{setId}', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetOrgsOrgIDAppsAppIDSetsSetIDRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDSetsSetIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_orgs_org_id_apps_app_id_sets_set_id_200_application_json_one_of = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.get_orgs_org_id_apps_app_id_sets_set_id_404_application_json_string = http_res.content

        return res

    
    def get_orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_(self, request: operations.GetOrgsOrgIDAppsAppIDSetsSetIDDiffSourceSetIDRequest) -> operations.GetOrgsOrgIDAppsAppIDSetsSetIDDiffSourceSetIDResponse:
        r"""Get the difference between 2 Deployment Sets"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDSetsSetIDDiffSourceSetIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/sets/{setId}/diff/{sourceSetId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDSetsSetIDDiffSourceSetIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlainDeltaResponse])
                res.plain_delta_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.get_orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_404_application_json_string = http_res.content

        return res

    
    def get_orgs_org_id_apps_app_id_users(self, request: operations.GetOrgsOrgIDAppsAppIDUsersRequest) -> operations.GetOrgsOrgIDAppsAppIDUsersResponse:
        r"""List Users with roles in an App"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDUsersRequest, base_url, '/orgs/{orgId}/apps/{appId}/users', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UserRoleResponse]])
                res.user_role_responses = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def get_orgs_org_id_apps_app_id_users_user_id_(self, request: operations.GetOrgsOrgIDAppsAppIDUsersUserIDRequest) -> operations.GetOrgsOrgIDAppsAppIDUsersUserIDResponse:
        r"""Get the role of a User on an Application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDUsersUserIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/users/{userId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def get_orgs_org_id_apps_app_id_value_set_versions(self, request: operations.GetOrgsOrgIDAppsAppIDValueSetVersionsRequest) -> operations.GetOrgsOrgIDAppsAppIDValueSetVersionsResponse:
        r"""List Value Set Versions in the App
        A new Value Set Version is created on every modification of a Value inside the app.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDValueSetVersionsRequest, base_url, '/orgs/{orgId}/apps/{appId}/value-set-versions', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetOrgsOrgIDAppsAppIDValueSetVersionsRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDValueSetVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ValueSetVersionResponse]])
                res.value_set_version_responses = out

        return res

    
    def get_orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_(self, request: operations.GetOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDRequest) -> operations.GetOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDResponse:
        r"""Get a single Value Set Version from the App"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/value-set-versions/{valueSetVersionId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueSetVersionResponse])
                res.value_set_version_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_apps_app_id_values(self, request: operations.GetOrgsOrgIDAppsAppIDValuesRequest) -> operations.GetOrgsOrgIDAppsAppIDValuesResponse:
        r"""List Shared Values in an Application
        The returned values will be the \"base\" values for the Application. The overridden value for the Environment can be retrieved via the `/orgs/{orgId}/apps/{appId}/envs/{envId}/values` endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDValuesRequest, base_url, '/orgs/{orgId}/apps/{appId}/values', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDValuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ValueResponse]])
                res.value_responses = out

        return res

    
    def get_orgs_org_id_apps_app_id_webhooks(self, request: operations.GetOrgsOrgIDAppsAppIDWebhooksRequest) -> operations.GetOrgsOrgIDAppsAppIDWebhooksResponse:
        r"""List Webhooks"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDWebhooksRequest, base_url, '/orgs/{orgId}/apps/{appId}/webhooks', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.WebhookResponse]])
                res.webhook_responses = out

        return res

    
    def get_orgs_org_id_apps_app_id_webhooks_job_id_(self, request: operations.GetOrgsOrgIDAppsAppIDWebhooksJobIDRequest) -> operations.GetOrgsOrgIDAppsAppIDWebhooksJobIDResponse:
        r"""Get a Webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDWebhooksJobIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/webhooks/{jobId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDWebhooksJobIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WebhookResponse])
                res.webhook_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def get_orgs_org_id_artefact_versions(self, request: operations.GetOrgsOrgIDArtefactVersionsRequest) -> operations.GetOrgsOrgIDArtefactVersionsResponse:
        r"""List all Artefacts Versions.
        Returns the Artefact Versions registered with your organization. If no elements are found, an empty list is returned.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDArtefactVersionsRequest, base_url, '/orgs/{orgId}/artefact-versions', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetOrgsOrgIDArtefactVersionsRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDArtefactVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ArtefactVersionResponse]])
                res.artefact_version_responses = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_artefact_versions_artefact_version_id_(self, request: operations.GetOrgsOrgIDArtefactVersionsArtefactVersionIDRequest) -> operations.GetOrgsOrgIDArtefactVersionsArtefactVersionIDResponse:
        r"""Get an Artefacts Versions.
        Returns a specific Artefact Version.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDArtefactVersionsArtefactVersionIDRequest, base_url, '/orgs/{orgId}/artefact-versions/{artefactVersionId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDArtefactVersionsArtefactVersionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ArtefactVersionResponse])
                res.artefact_version_response = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_artefacts(self, request: operations.GetOrgsOrgIDArtefactsRequest) -> operations.GetOrgsOrgIDArtefactsResponse:
        r"""List all Artefacts.
        Returns the Artefacts registered with your organization. If no elements are found, an empty list is returned.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDArtefactsRequest, base_url, '/orgs/{orgId}/artefacts', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetOrgsOrgIDArtefactsRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDArtefactsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ArtefactResponse]])
                res.artefact_responses = out

        return res

    
    def get_orgs_org_id_artefacts_artefact_id_versions(self, request: operations.GetOrgsOrgIDArtefactsArtefactIDVersionsRequest) -> operations.GetOrgsOrgIDArtefactsArtefactIDVersionsResponse:
        r"""List all Artefact Versions of an Artefact.
        Returns the Artefact Versions of a specified Artefact registered with your organization. If no elements are found, an empty list is returned.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDArtefactsArtefactIDVersionsRequest, base_url, '/orgs/{orgId}/artefacts/{artefactId}/versions', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetOrgsOrgIDArtefactsArtefactIDVersionsRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDArtefactsArtefactIDVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ArtefactVersionResponse]])
                res.artefact_version_responses = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_env_types(self, request: operations.GetOrgsOrgIDEnvTypesRequest) -> operations.GetOrgsOrgIDEnvTypesResponse:
        r"""List all Environment Types
        Lists all Environment Types in an Organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDEnvTypesRequest, base_url, '/orgs/{orgId}/env-types', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDEnvTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.EnvironmentTypeResponse]])
                res.environment_type_responses = out

        return res

    
    def get_orgs_org_id_env_types_env_type_id_(self, request: operations.GetOrgsOrgIDEnvTypesEnvTypeIDRequest) -> operations.GetOrgsOrgIDEnvTypesEnvTypeIDResponse:
        r"""Get an Environment Type
        Gets a specific Environment Type within an Organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDEnvTypesEnvTypeIDRequest, base_url, '/orgs/{orgId}/env-types/{envTypeId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDEnvTypesEnvTypeIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnvironmentTypeResponse])
                res.environment_type_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_env_types_env_type_users_user_id_(self, request: operations.GetOrgsOrgIDEnvTypesEnvTypeUsersUserIDRequest) -> operations.GetOrgsOrgIDEnvTypesEnvTypeUsersUserIDResponse:
        r"""Get the role of a User on an Environment Type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDEnvTypesEnvTypeUsersUserIDRequest, base_url, '/orgs/{orgId}/env-types/{envType}/users/{userId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDEnvTypesEnvTypeUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def get_orgs_org_id_events(self, request: operations.GetOrgsOrgIDEventsRequest) -> operations.GetOrgsOrgIDEventsResponse:
        r"""List Events"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDEventsRequest, base_url, '/orgs/{orgId}/events', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.EventResponse]])
                res.event_responses = out

        return res

    
    def get_orgs_org_id_images(self, request: operations.GetOrgsOrgIDImagesRequest) -> operations.GetOrgsOrgIDImagesResponse:
        r"""List all Container Images
        DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.
        
        Lists all of the Container Images registered for this organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDImagesRequest, base_url, '/orgs/{orgId}/images', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDImagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ImageResponse]])
                res.image_responses = out

        return res

    
    def get_orgs_org_id_images_image_id_(self, request: operations.GetOrgsOrgIDImagesImageIDRequest) -> operations.GetOrgsOrgIDImagesImageIDResponse:
        r"""Get a specific Image Object
        DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.
        
        The response includes a list of Image Builds as well as some metadata about the Image such as its Image Source.
        
        Note, `imageId` may not be the same as the container name. `imageId` is determined by the system making notifications about new builds.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDImagesImageIDRequest, base_url, '/orgs/{orgId}/images/{imageId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDImagesImageIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageResponse])
                res.image_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_images_image_id_builds(self, request: operations.GetOrgsOrgIDImagesImageIDBuildsRequest) -> operations.GetOrgsOrgIDImagesImageIDBuildsResponse:
        r"""Lists all the Builds of an Image
        DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.
        
        The response lists all available Image Builds of an Image.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDImagesImageIDBuildsRequest, base_url, '/orgs/{orgId}/images/{imageId}/builds', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDImagesImageIDBuildsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ImageBuildResponse]])
                res.image_build_responses = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_invitations(self, request: operations.GetOrgsOrgIDInvitationsRequest) -> operations.GetOrgsOrgIDInvitationsResponse:
        r"""List the invites issued for the organization."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDInvitationsRequest, base_url, '/orgs/{orgId}/invitations', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDInvitationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UserInviteResponse]])
                res.user_invite_responses = out

        return res

    
    def get_orgs_org_id_registries(self, request: operations.GetOrgsOrgIDRegistriesRequest) -> operations.GetOrgsOrgIDRegistriesResponse:
        r"""Lists available registries for the organization."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDRegistriesRequest, base_url, '/orgs/{orgId}/registries', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDRegistriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RegistryResponse]])
                res.registry_responses = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorInfoResponse])
                res.error_info_response = out

        return res

    
    def get_orgs_org_id_registries_reg_id_(self, request: operations.GetOrgsOrgIDRegistriesRegIDRequest) -> operations.GetOrgsOrgIDRegistriesRegIDResponse:
        r"""Loads a registry record details."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDRegistriesRegIDRequest, base_url, '/orgs/{orgId}/registries/{regId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDRegistriesRegIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RegistryResponse])
                res.registry_response = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorInfoResponse])
                res.error_info_response = out

        return res

    
    def get_orgs_org_id_registries_reg_id_creds(self, request: operations.GetOrgsOrgIDRegistriesRegIDCredsRequest) -> operations.GetOrgsOrgIDRegistriesRegIDCredsResponse:
        r"""Returns current account credentials or secret details for the registry."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDRegistriesRegIDCredsRequest, base_url, '/orgs/{orgId}/registries/{regId}/creds', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDRegistriesRegIDCredsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RegistryCredsResponse])
                res.registry_creds_response = out
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorInfoResponse])
                res.error_info_response = out

        return res

    
    def get_orgs_org_id_resources_account_types(self, request: operations.GetOrgsOrgIDResourcesAccountTypesRequest) -> operations.GetOrgsOrgIDResourcesAccountTypesResponse:
        r"""List Resource Account Types available to the organization."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDResourcesAccountTypesRequest, base_url, '/orgs/{orgId}/resources/account-types', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDResourcesAccountTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AccountTypeResponse]])
                res.account_type_responses = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_resources_accounts(self, request: operations.GetOrgsOrgIDResourcesAccountsRequest) -> operations.GetOrgsOrgIDResourcesAccountsResponse:
        r"""List Resource Accounts in the organization."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDResourcesAccountsRequest, base_url, '/orgs/{orgId}/resources/accounts', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDResourcesAccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ResourceAccountResponse]])
                res.resource_account_responses = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_resources_accounts_acc_id_(self, request: operations.GetOrgsOrgIDResourcesAccountsAccIDRequest) -> operations.GetOrgsOrgIDResourcesAccountsAccIDResponse:
        r"""Get a Resource Account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDResourcesAccountsAccIDRequest, base_url, '/orgs/{orgId}/resources/accounts/{accId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDResourcesAccountsAccIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceAccountResponse])
                res.resource_account_response = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_resources_defs(self, request: operations.GetOrgsOrgIDResourcesDefsRequest) -> operations.GetOrgsOrgIDResourcesDefsResponse:
        r"""List Resource Definitions.
        Filter criteria can be applied to obtain all the resource definitions that could match the filters, grouped by type and sorted by matching rank.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDResourcesDefsRequest, base_url, '/orgs/{orgId}/resources/defs', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetOrgsOrgIDResourcesDefsRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDResourcesDefsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ResourceDefinitionResponse]])
                res.resource_definition_responses = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_resources_defs_def_id_(self, request: operations.GetOrgsOrgIDResourcesDefsDefIDRequest) -> operations.GetOrgsOrgIDResourcesDefsDefIDResponse:
        r"""Get a specific Resource Definition."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDResourcesDefsDefIDRequest, base_url, '/orgs/{orgId}/resources/defs/{defId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDResourcesDefsDefIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceDefinitionResponse])
                res.resource_definition_response = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_resources_defs_def_id_resources(self, request: operations.GetOrgsOrgIDResourcesDefsDefIDResourcesRequest) -> operations.GetOrgsOrgIDResourcesDefsDefIDResourcesResponse:
        r"""List Active Resources provisioned via a specific Resource Definition."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDResourcesDefsDefIDResourcesRequest, base_url, '/orgs/{orgId}/resources/defs/{defId}/resources', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDResourcesDefsDefIDResourcesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ActiveResourceResponse]])
                res.active_resource_responses = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_resources_drivers(self, request: operations.GetOrgsOrgIDResourcesDriversRequest) -> operations.GetOrgsOrgIDResourcesDriversResponse:
        r"""List Resource Drivers."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDResourcesDriversRequest, base_url, '/orgs/{orgId}/resources/drivers', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDResourcesDriversResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DriverDefinitionResponse]])
                res.driver_definition_responses = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_resources_drivers_driver_id_(self, request: operations.GetOrgsOrgIDResourcesDriversDriverIDRequest) -> operations.GetOrgsOrgIDResourcesDriversDriverIDResponse:
        r"""Get a Resource Driver.
        # Only drivers that belongs to the given organization or registered as `public` are accessible through this endpoint
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDResourcesDriversDriverIDRequest, base_url, '/orgs/{orgId}/resources/drivers/{driverId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDResourcesDriversDriverIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DriverDefinitionResponse])
                res.driver_definition_response = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_resources_types(self, request: operations.GetOrgsOrgIDResourcesTypesRequest) -> operations.GetOrgsOrgIDResourcesTypesResponse:
        r"""List Resource Types."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDResourcesTypesRequest, base_url, '/orgs/{orgId}/resources/types', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDResourcesTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ResourceTypeResponse]])
                res.resource_type_responses = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_users(self, request: operations.GetOrgsOrgIDUsersRequest) -> operations.GetOrgsOrgIDUsersResponse:
        r"""List Users with roles in an Organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDUsersRequest, base_url, '/orgs/{orgId}/users', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UserRoleResponse]])
                res.user_role_responses = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def get_orgs_org_id_users_user_id_(self, request: operations.GetOrgsOrgIDUsersUserIDRequest) -> operations.GetOrgsOrgIDUsersUserIDResponse:
        r"""Get the role of a User on an Organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDUsersUserIDRequest, base_url, '/orgs/{orgId}/users/{userId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def get_orgs_org_id_workload_profiles(self, request: operations.GetOrgsOrgIDWorkloadProfilesRequest) -> operations.GetOrgsOrgIDWorkloadProfilesResponse:
        r"""List workload profiles available to the organization."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDWorkloadProfilesRequest, base_url, '/orgs/{orgId}/workload-profiles', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDWorkloadProfilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.WorkloadProfileResponse]])
                res.workload_profile_responses = out

        return res

    
    def get_orgs_org_id_workload_profiles_profile_qid_(self, request: operations.GetOrgsOrgIDWorkloadProfilesProfileQidRequest) -> operations.GetOrgsOrgIDWorkloadProfilesProfileQidResponse:
        r"""Get a Workload Profile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDWorkloadProfilesProfileQidRequest, base_url, '/orgs/{orgId}/workload-profiles/{profileQid}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDWorkloadProfilesProfileQidResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkloadProfileResponse])
                res.workload_profile_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_workload_profiles_profile_qid_versions(self, request: operations.GetOrgsOrgIDWorkloadProfilesProfileQidVersionsRequest) -> operations.GetOrgsOrgIDWorkloadProfilesProfileQidVersionsResponse:
        r"""List versions of the given workload profile with optional constraint."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDWorkloadProfilesProfileQidVersionsRequest, base_url, '/orgs/{orgId}/workload-profiles/{profileQid}/versions', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetOrgsOrgIDWorkloadProfilesProfileQidVersionsRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDWorkloadProfilesProfileQidVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.WorkloadProfileVersionResponse]])
                res.workload_profile_version_responses = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_tokens(self) -> operations.GetTokensResponse:
        r"""DEPRECATED"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tokens'
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTokensResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_tokens_200_application_json_object = out

        return res

    
    def get_users_me(self) -> operations.GetUsersMeResponse:
        r"""DEPRECATED"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users/me'
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersMeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_users_me_200_application_json_object = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    
    def patch_current_user(self, request: shared.UserProfileExtendedRequest) -> operations.PatchCurrentUserResponse:
        r"""Updates the extended profile of the current user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/current-user'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchCurrentUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserProfileExtendedResponse])
                res.user_profile_extended_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    
    def patch_orgs_org_id_apps_app_id_deltas_delta_id_(self, request: operations.PatchOrgsOrgIDAppsAppIDDeltasDeltaIDRequest) -> operations.PatchOrgsOrgIDAppsAppIDDeltasDeltaIDResponse:
        r"""Update an existing Delta"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDAppsAppIDDeltasDeltaIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/deltas/{deltaId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDAppsAppIDDeltasDeltaIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeltaResponse])
                res.delta_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.patch_orgs_org_id_apps_app_id_deltas_delta_id_404_application_json_string = http_res.content

        return res

    
    def patch_orgs_org_id_apps_app_id_envs_env_id_runtime_replicas(self, request: operations.PatchOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeReplicasRequest) -> operations.PatchOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeReplicasResponse:
        r"""Set number of replicas for an environment's modules."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeReplicasRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/runtime/replicas', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDAppsAppIDEnvsEnvIDRuntimeReplicasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def patch_orgs_org_id_apps_app_id_envs_env_id_values_key_(self, request: operations.PatchOrgsOrgIDAppsAppIDEnvsEnvIDValuesKeyRequest) -> operations.PatchOrgsOrgIDAppsAppIDEnvsEnvIDValuesKeyResponse:
        r"""Update Shared Value for an Environment
        Update the value or description of the Shared Value. Shared Values marked as secret can also be updated.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDAppsAppIDEnvsEnvIDValuesKeyRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/values/{key}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "value_patch_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDAppsAppIDEnvsEnvIDValuesKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueResponse])
                res.value_response = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def patch_orgs_org_id_apps_app_id_users_user_id_(self, request: operations.PatchOrgsOrgIDAppsAppIDUsersUserIDRequest) -> operations.PatchOrgsOrgIDAppsAppIDUsersUserIDResponse:
        r"""Update the role of a User on an Application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDAppsAppIDUsersUserIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/users/{userId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDAppsAppIDUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def patch_orgs_org_id_apps_app_id_values_key_(self, request: operations.PatchOrgsOrgIDAppsAppIDValuesKeyRequest) -> operations.PatchOrgsOrgIDAppsAppIDValuesKeyResponse:
        r"""Update Shared Value for an Application
        Update the value or description of the Shared Value. Shared Values marked as secret can also be updated.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDAppsAppIDValuesKeyRequest, base_url, '/orgs/{orgId}/apps/{appId}/values/{key}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "value_patch_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDAppsAppIDValuesKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueResponse])
                res.value_response = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def patch_orgs_org_id_artefacts_artefact_id_versions_version_id_(self, request: operations.PatchOrgsOrgIDArtefactsArtefactIDVersionsVersionIDRequest) -> operations.PatchOrgsOrgIDArtefactsArtefactIDVersionsVersionIDResponse:
        r"""Update Version of an Artefact.
        Update the version of a specified Artefact registered with your organization\".
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDArtefactsArtefactIDVersionsVersionIDRequest, base_url, '/orgs/{orgId}/artefacts/{artefactId}/versions/{versionId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_artefact_version_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDArtefactsArtefactIDVersionsVersionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ArtefactVersionResponse])
                res.artefact_version_response = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def patch_orgs_org_id_env_types_env_type_users_user_id_(self, request: operations.PatchOrgsOrgIDEnvTypesEnvTypeUsersUserIDRequest) -> operations.PatchOrgsOrgIDEnvTypesEnvTypeUsersUserIDResponse:
        r"""Update the role of a User on an Environment Type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDEnvTypesEnvTypeUsersUserIDRequest, base_url, '/orgs/{orgId}/env-types/{envType}/users/{userId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDEnvTypesEnvTypeUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def patch_orgs_org_id_registries_reg_id_(self, request: operations.PatchOrgsOrgIDRegistriesRegIDRequest) -> operations.PatchOrgsOrgIDRegistriesRegIDResponse:
        r"""Updates (patches) an existing registry record."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDRegistriesRegIDRequest, base_url, '/orgs/{orgId}/registries/{regId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "registry_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDRegistriesRegIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RegistryResponse])
                res.registry_response = out
        elif http_res.status_code in [400, 403, 404, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorInfoResponse])
                res.error_info_response = out

        return res

    
    def patch_orgs_org_id_resources_accounts_acc_id_(self, request: operations.PatchOrgsOrgIDResourcesAccountsAccIDRequest) -> operations.PatchOrgsOrgIDResourcesAccountsAccIDResponse:
        r"""Update a Resource Account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDResourcesAccountsAccIDRequest, base_url, '/orgs/{orgId}/resources/accounts/{accId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_resource_account_request_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDResourcesAccountsAccIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceAccountResponse])
                res.resource_account_response = out
        elif http_res.status_code in [400, 404, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def patch_orgs_org_id_resources_defs_def_id_(self, request: operations.PatchOrgsOrgIDResourcesDefsDefIDRequest) -> operations.PatchOrgsOrgIDResourcesDefsDefIDResponse:
        r"""Update a Resource Definition."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDResourcesDefsDefIDRequest, base_url, '/orgs/{orgId}/resources/defs/{defId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "patch_resource_definition_request_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDResourcesDefsDefIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceDefinitionResponse])
                res.resource_definition_response = out
        elif http_res.status_code in [400, 404, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def patch_orgs_org_id_users_user_id_(self, request: operations.PatchOrgsOrgIDUsersUserIDRequest) -> operations.PatchOrgsOrgIDUsersUserIDResponse:
        r"""Update the role of a User on an Organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDUsersUserIDRequest, base_url, '/orgs/{orgId}/users/{userId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def post_orgs_org_id_apps(self, request: operations.PostOrgsOrgIDAppsRequest) -> operations.PostOrgsOrgIDAppsResponse:
        r"""Add a new Application to an Organization
        Creates a new Application, then adds it to the specified Organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsRequest, base_url, '/orgs/{orgId}/apps', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "application_creation_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApplicationResponse])
                res.application_response = out
        elif http_res.status_code in [400, 401, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_apps_app_id_deltas(self, request: operations.PostOrgsOrgIDAppsAppIDDeltasRequest) -> operations.PostOrgsOrgIDAppsAppIDDeltasResponse:
        r"""Create a new Delta"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDDeltasRequest, base_url, '/orgs/{orgId}/apps/{appId}/deltas', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "delta_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDDeltasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.post_orgs_org_id_apps_app_id_deltas_200_application_json_one_of = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_apps_app_id_envs(self, request: operations.PostOrgsOrgIDAppsAppIDEnvsRequest) -> operations.PostOrgsOrgIDAppsAppIDEnvsResponse:
        r"""Add a new Environment to an Application.
        Creates a new Environment of the specified Type and associates it with the Application specified by `appId`.
        
        The Environment is also initialized to the **current or past state of Deployment in another Environment**. This ensures that every Environment is derived from a previously known state. This means it is not possible to create a new Environment for an Application until at least one Deployment has occurred. (The Deployment does not have to be successful.)
        
        The Type of the Environment must be already defined in the Organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDEnvsRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "environment_definition_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDEnvsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnvironmentResponse])
                res.environment_response = out
        elif http_res.status_code in [400, 404, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_apps_app_id_envs_env_id_deploys(self, request: operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDDeploysRequest) -> operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDDeploysResponse:
        r"""Start a new Deployment.
        At Humanitec, Deployments are defined as changes to the state of the Environment. The state can be changed by defining a set of desired changes to the current state via a Deployment Delta or by resetting the current state after a previous Deployment. (See Environment Rebase.) Both types of changes can be combined into a single Deployment during which the Delta is applied to the Rebased state.
        
        When specifying a Delta, a Delta ID must be used. That Delta must have been committed to the Delta store prior to the Deployment.
        
        A Set ID can also be defined in the deployment to force the state of the environment to a particular state. This will be ignored if the Delta is specified.
        
        **NOTE:**
        
        Directly setting a `set_id` in a deployment is not recommended as it will not record history of where the set came from. If the intention is to replicate an existing environment, use the environment rebasing approach described above.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDDeploysRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "deployment_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDDeploysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeploymentResponse])
                res.deployment_response = out
        elif http_res.status_code in [400, 404, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_apps_app_id_envs_env_id_rules(self, request: operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDRulesRequest) -> operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDRulesResponse:
        r"""Create a new Automation Rule for an Environment.
        Items marked as deprecated are still supported (however not recommended) for use and are incompatible with properties of the latest api version. In particular an error is raised if  `images_filter` (deprecated) and `artefacts_filter` are used in the same payload. The same is true for `exclude_images_filter` (deprecated) and `exclude_artefacts_filter`. `match` and `update_to` are still supported but will trigger an error if combined with `match_ref`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDRulesRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/rules', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "automation_rule_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutomationRuleResponse])
                res.automation_rule_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorInfoResponse])
                res.error_info_response = out
        elif http_res.status_code == 422:
            pass

        return res

    
    def post_orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_(self, request: operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDPurgeKeyRequest) -> operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDPurgeKeyResponse:
        r"""Purge the value of a specific Shared Value from the App Environment Version history.
        Purging permanently removes the value of a specific Shared Value in an application. A purged value is no longer accessible, can't be restored and can't be used
        by deployments referencing a Value Set Version where the value was present.
        
        Learn more about purging in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#purge).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDPurgeKeyRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions/{valueSetVersionId}/purge/{key}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "value_set_action_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDPurgeKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore(self, request: operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDRestoreRequest) -> operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDRestoreResponse:
        r"""Restore a Value Set Version in an Environment of an App
        Restore the values of all Shared Values in an environment from a specific version. Keys not existing in the selected version are deleted.
        
        Learn more about reverting in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#revert).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDRestoreRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions/{valueSetVersionId}/restore', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "value_set_action_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDRestoreResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueSetVersionResponse])
                res.value_set_version_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_(self, request: operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDRestoreKeyRequest) -> operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDRestoreKeyResponse:
        r"""Restore a specific key from the Value Set Version in an Environment of an App
        Restore the values of a single Shared Value in an Environment from a specific version.
        
        Learn more about reverting in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#revert).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDRestoreKeyRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions/{valueSetVersionId}/restore/{key}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "value_set_action_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValueSetVersionsValueSetVersionIDRestoreKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueSetVersionResponse])
                res.value_set_version_response = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_apps_app_id_envs_env_id_values(self, request: operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValuesRequest) -> operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValuesResponse:
        r"""Create a Shared Value for an Environment
        The Shared Value created will only be available to the specific Environment.
        
        If a Value is marked as a secret, it will be securely stored. It will not be possible to retrieve the value again through the API. The value of the secret can however be updated.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValuesRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/values', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "value_create_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDEnvsEnvIDValuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueResponse])
                res.value_response = out
        elif http_res.status_code in [400, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_apps_app_id_sets_set_id_(self, request: operations.PostOrgsOrgIDAppsAppIDSetsSetIDRequest) -> operations.PostOrgsOrgIDAppsAppIDSetsSetIDResponse:
        r"""Apply a Deployment Delta to a Deployment Set"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDSetsSetIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/sets/{setId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "delta_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDSetsSetIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.post_orgs_org_id_apps_app_id_sets_set_id_200_application_json_string = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.post_orgs_org_id_apps_app_id_sets_set_id_404_application_json_string = http_res.content

        return res

    
    def post_orgs_org_id_apps_app_id_users(self, request: operations.PostOrgsOrgIDAppsAppIDUsersRequest) -> operations.PostOrgsOrgIDAppsAppIDUsersResponse:
        r"""Adds a User to an Application with a Role"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDUsersRequest, base_url, '/orgs/{orgId}/apps/{appId}/users', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_role_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code in [404, 422]:
            pass

        return res

    
    def post_orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_(self, request: operations.PostOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDPurgeKeyRequest) -> operations.PostOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDPurgeKeyResponse:
        r"""Purge the value of a specific Shared Value from the App Version history.
        Purging permanently removes the value of a specific Shared Value in an Application. A purged value is no longer accessible, can't be restored and can't be used
        by deployments referencing a Value Set Version where the value was present.
        
        Learn more about purging in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#purge).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDPurgeKeyRequest, base_url, '/orgs/{orgId}/apps/{appId}/value-set-versions/{valueSetVersionId}/purge/{key}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "value_set_action_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDPurgeKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore(self, request: operations.PostOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDRestoreRequest) -> operations.PostOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDRestoreResponse:
        r"""Restore a Value Set Version in an App
        Restore the values of all Shared Values in an application from a specific version. Keys not existing in the selected version are deleted.
        
        Learn more about reverting in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#revert).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDRestoreRequest, base_url, '/orgs/{orgId}/apps/{appId}/value-set-versions/{valueSetVersionId}/restore', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "value_set_action_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDRestoreResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueSetVersionResponse])
                res.value_set_version_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_(self, request: operations.PostOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDRestoreKeyRequest) -> operations.PostOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDRestoreKeyResponse:
        r"""Restore a specific key from the Value Set Version in an App
        Restore the values of a single Shared Value in an application from a specific version.
        
        Learn more about reverting in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#revert).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDRestoreKeyRequest, base_url, '/orgs/{orgId}/apps/{appId}/value-set-versions/{valueSetVersionId}/restore/{key}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "value_set_action_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDValueSetVersionsValueSetVersionIDRestoreKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueSetVersionResponse])
                res.value_set_version_response = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_apps_app_id_values(self, request: operations.PostOrgsOrgIDAppsAppIDValuesRequest) -> operations.PostOrgsOrgIDAppsAppIDValuesResponse:
        r"""Create a Shared Value for an Application
        The Shared Value created will be available to all Environments in that Application.
        
        If a Value is marked as a secret, it will be securely stored. It will not be possible to retrieve the value again through the API. The value of the secret can however be updated.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDValuesRequest, base_url, '/orgs/{orgId}/apps/{appId}/values', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "value_create_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDValuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueResponse])
                res.value_response = out
        elif http_res.status_code in [400, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_apps_app_id_webhooks(self, request: operations.PostOrgsOrgIDAppsAppIDWebhooksRequest) -> operations.PostOrgsOrgIDAppsAppIDWebhooksResponse:
        r"""Create a new Webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDWebhooksRequest, base_url, '/orgs/{orgId}/apps/{appId}/webhooks', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "webhook_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WebhookResponse])
                res.webhook_response = out
        elif http_res.status_code in [400, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorInfoResponse])
                res.error_info_response = out
        elif http_res.status_code == 422:
            pass

        return res

    
    def post_orgs_org_id_apps_app_id_webhooks_job_id_(self, request: operations.PostOrgsOrgIDAppsAppIDWebhooksJobIDRequest) -> operations.PostOrgsOrgIDAppsAppIDWebhooksJobIDResponse:
        r"""Update a Webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDWebhooksJobIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/webhooks/{jobId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "webhook_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDWebhooksJobIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WebhookResponse])
                res.webhook_response = out
        elif http_res.status_code in [404, 422]:
            pass

        return res

    
    def post_orgs_org_id_artefact_versions(self, request: operations.PostOrgsOrgIDArtefactVersionsRequest) -> operations.PostOrgsOrgIDArtefactVersionsResponse:
        r"""Register a new Artefact Version with your organization."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDArtefactVersionsRequest, base_url, '/orgs/{orgId}/artefact-versions', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_artefact_version_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostOrgsOrgIDArtefactVersionsRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDArtefactVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ArtefactVersionResponse])
                res.artefact_version_response = out
        elif http_res.status_code in [400, 401]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_env_types(self, request: operations.PostOrgsOrgIDEnvTypesRequest) -> operations.PostOrgsOrgIDEnvTypesResponse:
        r"""Add a new Environment Type
        Adds a new Environment Type to an Organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDEnvTypesRequest, base_url, '/orgs/{orgId}/env-types', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "environment_type_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDEnvTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnvironmentTypeResponse])
                res.environment_type_response = out
        elif http_res.status_code in [400, 401, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_env_types_env_type_users(self, request: operations.PostOrgsOrgIDEnvTypesEnvTypeUsersRequest) -> operations.PostOrgsOrgIDEnvTypesEnvTypeUsersResponse:
        r"""Adds a User to an Environment Type with a Role"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDEnvTypesEnvTypeUsersRequest, base_url, '/orgs/{orgId}/env-types/{envType}/users', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_role_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDEnvTypesEnvTypeUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRoleResponse])
                res.user_role_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def post_orgs_org_id_images_image_id_builds(self, request: operations.PostOrgsOrgIDImagesImageIDBuildsRequest) -> operations.PostOrgsOrgIDImagesImageIDBuildsResponse:
        r"""Add a new Image Build
        DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.
        
        This endpoint is used by Continuous Integration (CI) pipelines to notify Humanitec that a new Image Build is available.
        
        If there is no Image with ID `imageId`, it will be automatically created.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDImagesImageIDBuildsRequest, base_url, '/orgs/{orgId}/images/{imageId}/builds', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "image_build_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDImagesImageIDBuildsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_invitations(self, request: operations.PostOrgsOrgIDInvitationsRequest) -> operations.PostOrgsOrgIDInvitationsResponse:
        r"""Invites a user to an Organization with a specified role."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDInvitationsRequest, base_url, '/orgs/{orgId}/invitations', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_invite_request_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDInvitationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UserRoleResponse]])
                res.user_role_responses = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def post_orgs_org_id_registries(self, request: operations.PostOrgsOrgIDRegistriesRequest) -> operations.PostOrgsOrgIDRegistriesResponse:
        r"""Creates a new registry record."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDRegistriesRequest, base_url, '/orgs/{orgId}/registries', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "registry_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDRegistriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RegistryResponse])
                res.registry_response = out
        elif http_res.status_code in [400, 401, 404, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorInfoResponse])
                res.error_info_response = out

        return res

    
    def post_orgs_org_id_resources_accounts(self, request: operations.PostOrgsOrgIDResourcesAccountsRequest) -> operations.PostOrgsOrgIDResourcesAccountsResponse:
        r"""Create a new Resource Account in the organization."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDResourcesAccountsRequest, base_url, '/orgs/{orgId}/resources/accounts', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_resource_account_request_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDResourcesAccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceAccountResponse])
                res.resource_account_response = out
        elif http_res.status_code in [400, 401, 409, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_resources_defs(self, request: operations.PostOrgsOrgIDResourcesDefsRequest) -> operations.PostOrgsOrgIDResourcesDefsResponse:
        r"""Create a new Resource Definition."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDResourcesDefsRequest, base_url, '/orgs/{orgId}/resources/defs', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_resource_definition_request_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDResourcesDefsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceDefinitionResponse])
                res.resource_definition_response = out
        elif http_res.status_code in [400, 409, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_resources_defs_def_id_criteria(self, request: operations.PostOrgsOrgIDResourcesDefsDefIDCriteriaRequest) -> operations.PostOrgsOrgIDResourcesDefsDefIDCriteriaResponse:
        r"""Add a new Matching Criteria to a Resource Definition.
        Matching Criteria are combined with Resource Type to select a specific definition. Matching Criteria can be set for any combination of Application ID, Environment ID, Environment Type, and Resource ID. In the event of multiple matches, the most specific match is chosen.
        
        For example, given 3 sets of matching criteria for the same type:
        
        ```
         1. {\"env_type\":\"test\"}
         2. {\"env_type\":\"development\"}
         3. {\"env_type\":\"test\", \"app_id\":\"my-app\"}
        ```
        
        If, a resource of that time was needed in an Application `my-app`, Environment `qa-team` with Type `test` and Resource ID `modules.my-module-externals.my-resource`, there would be two resources definitions matching the criteria: #1 & #3. Definition #3 will be chosen because it's matching criteria is the most specific.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDResourcesDefsDefIDCriteriaRequest, base_url, '/orgs/{orgId}/resources/defs/{defId}/criteria', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "matching_criteria_rule_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDResourcesDefsDefIDCriteriaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MatchingCriteriaResponse])
                res.matching_criteria_response = out
        elif http_res.status_code in [400, 409, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_resources_drivers(self, request: operations.PostOrgsOrgIDResourcesDriversRequest) -> operations.PostOrgsOrgIDResourcesDriversResponse:
        r"""Register a new Resource Driver."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDResourcesDriversRequest, base_url, '/orgs/{orgId}/resources/drivers', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_driver_request_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDResourcesDriversResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DriverDefinitionResponse])
                res.driver_definition_response = out
        elif http_res.status_code in [400, 409, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_users(self, request: operations.PostOrgsOrgIDUsersRequest) -> operations.PostOrgsOrgIDUsersResponse:
        r"""Creates a new service user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDUsersRequest, base_url, '/orgs/{orgId}/users', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "new_service_user_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserProfileExtendedResponse])
                res.user_profile_extended_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code in [403, 422]:
            pass

        return res

    
    def post_orgs_org_id_workload_profiles(self, request: operations.PostOrgsOrgIDWorkloadProfilesRequest) -> operations.PostOrgsOrgIDWorkloadProfilesResponse:
        r"""Create new Workload Profile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDWorkloadProfilesRequest, base_url, '/orgs/{orgId}/workload-profiles', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "workload_profile_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDWorkloadProfilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkloadProfileResponse])
                res.workload_profile_response = out
        elif http_res.status_code in [400, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_workload_profiles_profile_qid_versions(self, request: operations.PostOrgsOrgIDWorkloadProfilesProfileQidVersionsRequest) -> operations.PostOrgsOrgIDWorkloadProfilesProfileQidVersionsResponse:
        r"""Add new Version of the Workload Profile
        Creates a Workload Profile Version from the uploaded Helm chart. The version is retrieved from the chart's metadata (Charts.yaml file).
        
        The request has content type `multipart/form-data` and the request body includes two parts:
        
        1. `file` with `application/x-gzip` content type which is an archive containing a Helm chart.
        
        2. `metadata` with `application/json` content type which defines the version's metadata.
        
        Request body example:
        
        	Content-Type: multipart/form-data; boundary=----boundary 	----boundary 	Content-Disposition: form-data; name=\"metadata\" 	Content-Type: application/json; charset=UTF-8 	{ 	  \"features\": { 	     \"humanitec/service\": {}, 	     \"humanitec/volumes\": {}, 	     \"custom\": {\"schema\": {}} 	  }, 	  \"notes\": \"Notes related to this version of the profile\" 	} 	----boundary 	Content-Disposition: form-data; name=\"file\"; filename=\"my-workload-1.0.1.tgz\" 	Content-Type: application/x-gzip 	[TGZ_DATA] 	----boundary
        
        **NOTE:**
        
        A Workload Profile must be created before a version can be added to it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDWorkloadProfilesProfileQidVersionsRequest, base_url, '/orgs/{orgId}/workload-profiles/{profileQid}/versions', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDWorkloadProfilesProfileQidVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkloadProfileVersionResponse])
                res.workload_profile_version_response = out
        elif http_res.status_code in [400, 404, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def put_delta(self, request: operations.PutDeltaRequest) -> operations.PutDeltaResponse:
        r"""Update an existing Delta"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutDeltaRequest, base_url, '/orgs/{orgId}/apps/{appId}/deltas/{deltaId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "delta_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutDeltaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.put_delta_404_application_json_string = http_res.content

        return res

    
    def put_orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived(self, request: operations.PutOrgsOrgIDAppsAppIDDeltasDeltaIDMetadataArchivedRequest) -> operations.PutOrgsOrgIDAppsAppIDDeltasDeltaIDMetadataArchivedResponse:
        r"""Mark a Delta as \\"archived\\" 
        Archived Deltas are still accessible but can no longer be updated.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrgsOrgIDAppsAppIDDeltasDeltaIDMetadataArchivedRequest, base_url, '/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/metadata/archived', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrgsOrgIDAppsAppIDDeltasDeltaIDMetadataArchivedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.put_orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_404_application_json_string = http_res.content

        return res

    
    def put_orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id(self, request: operations.PutOrgsOrgIDAppsAppIDDeltasDeltaIDMetadataEnvIDRequest) -> operations.PutOrgsOrgIDAppsAppIDDeltasDeltaIDMetadataEnvIDResponse:
        r"""Change the Environment of a Delta"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrgsOrgIDAppsAppIDDeltasDeltaIDMetadataEnvIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/metadata/env_id', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrgsOrgIDAppsAppIDDeltasDeltaIDMetadataEnvIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.put_orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_404_application_json_string = http_res.content

        return res

    
    def put_orgs_org_id_apps_app_id_deltas_delta_id_metadata_name(self, request: operations.PutOrgsOrgIDAppsAppIDDeltasDeltaIDMetadataNameRequest) -> operations.PutOrgsOrgIDAppsAppIDDeltasDeltaIDMetadataNameResponse:
        r"""Change the name of a Delta"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrgsOrgIDAppsAppIDDeltasDeltaIDMetadataNameRequest, base_url, '/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/metadata/name', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrgsOrgIDAppsAppIDDeltasDeltaIDMetadataNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                res.put_orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_404_application_json_string = http_res.content

        return res

    
    def put_orgs_org_id_apps_app_id_envs_env_id_from_deploy_id(self, request: operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDFromDeployIDRequest) -> operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDFromDeployIDResponse:
        r"""Rebase to a different Deployment.
        Rebasing an Environment means that the next Deployment to the Environment will be based on the Deployment specified in the rebase rather than the last one in the Environment. The Deployment to rebase to can either be current or a previous Deployment. The Deployment can be from any Environment of the same Application.
        
        _Running code will only be affected on the next Deployment to the Environment._
        
        Common use cases for rebasing an Environment:
        
        * _Rollback_: Rebasing to a previous Deployment in the current Environment and then Deploying without additional changes will execute a rollback to the previous Deployment state.
        
        * _Clone_: Rebasing to the current Deployment in a different Environment and then deploying without additional changes will clone all of the configuration of the other Environment into the current one. (NOTE: External Resources will not be cloned in the process - the current External Resources of the Environment will remain unchanged and will be used by the deployed Application in the Environment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDFromDeployIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/from_deploy_id', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDFromDeployIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def put_orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_(self, request: operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDRulesRuleIDRequest) -> operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDRulesRuleIDResponse:
        r"""Update an existing Automation Rule for an Environment.
        Items marked as deprecated are still supported (however not recommended) for use and are incompatible with properties of the latest api version. In particular an error is raised if  `images_filter` (deprecated) and `artefacts_filter` are used in the same payload. The same is true for `exclude_images_filter` (deprecated) and `exclude_artefacts_filter`. `match` and `update_to` are still supported but will trigger an error if combined with `match_ref`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDRulesRuleIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/rules/{ruleId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "automation_rule_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDRulesRuleIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutomationRuleResponse])
                res.automation_rule_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorInfoResponse])
                res.error_info_response = out
        elif http_res.status_code in [404, 422]:
            pass

        return res

    
    def put_orgs_org_id_apps_app_id_envs_env_id_runtime_paused(self, request: operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDRuntimePausedRequest) -> operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDRuntimePausedResponse:
        r"""Pause / Resume an environment.
        On pause requests, all the Kubernetes Deployment resources are scaled down to 0 replicas.
        
        On resume requests, all the Kubernetes Deployment resources are scaled up to the number of replicas running before the environment was paused.
        
        When an environment is paused, it is not possible to:
        
        ```
          - Deploy the environment within Humanitec.
          - Scale the number of replicas running of any workload.
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDRuntimePausedRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/runtime/paused', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDRuntimePausedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def put_orgs_org_id_apps_app_id_envs_env_id_values_key_(self, request: operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDValuesKeyRequest) -> operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDValuesKeyResponse:
        r"""Update Shared Value for an Environment
        Update the value or description of the Shared Value. Shared Values marked as secret can also be updated.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDValuesKeyRequest, base_url, '/orgs/{orgId}/apps/{appId}/envs/{envId}/values/{key}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "value_edit_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrgsOrgIDAppsAppIDEnvsEnvIDValuesKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueResponse])
                res.value_response = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def put_orgs_org_id_apps_app_id_values_key_(self, request: operations.PutOrgsOrgIDAppsAppIDValuesKeyRequest) -> operations.PutOrgsOrgIDAppsAppIDValuesKeyResponse:
        r"""Update Shared Value for an Application
        Update the value or description of the Shared Value. Shared Values marked as secret can also be updated.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrgsOrgIDAppsAppIDValuesKeyRequest, base_url, '/orgs/{orgId}/apps/{appId}/values/{key}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "value_edit_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrgsOrgIDAppsAppIDValuesKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueResponse])
                res.value_response = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def put_orgs_org_id_resources_defs_def_id_(self, request: operations.PutOrgsOrgIDResourcesDefsDefIDRequest) -> operations.PutOrgsOrgIDResourcesDefsDefIDResponse:
        r"""Update a Resource Definition."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrgsOrgIDResourcesDefsDefIDRequest, base_url, '/orgs/{orgId}/resources/defs/{defId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_resource_definition_request_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrgsOrgIDResourcesDefsDefIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceDefinitionResponse])
                res.resource_definition_response = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def put_orgs_org_id_resources_drivers_driver_id_(self, request: operations.PutOrgsOrgIDResourcesDriversDriverIDRequest) -> operations.PutOrgsOrgIDResourcesDriversDriverIDResponse:
        r"""Update a Resource Driver."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrgsOrgIDResourcesDriversDriverIDRequest, base_url, '/orgs/{orgId}/resources/drivers/{driverId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_driver_request_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrgsOrgIDResourcesDriversDriverIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DriverDefinitionResponse])
                res.driver_definition_response = out
        elif http_res.status_code in [400, 404, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    