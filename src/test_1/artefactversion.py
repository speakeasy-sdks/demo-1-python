"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from test_1.models import operations, shared
from typing import Optional

class ArtefactVersion:
    r"""An Artefact Version represents a particular version of an Artefact that can be added to an Application.
    <SchemaDefinition schemaRef=\"#/components/schemas/ArtefactVersionRequest\" />
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def get_orgs_org_id_artefact_versions(self, request: operations.GetOrgsOrgIDArtefactVersionsRequest) -> operations.GetOrgsOrgIDArtefactVersionsResponse:
        r"""List all Artefacts Versions.
        Returns the Artefact Versions registered with your organization. If no elements are found, an empty list is returned.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDArtefactVersionsRequest, base_url, '/orgs/{orgId}/artefact-versions', request)
        
        query_params = utils.get_query_params(operations.GetOrgsOrgIDArtefactVersionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDArtefactVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ArtefactVersionResponse]])
                res.artefact_version_responses = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_artefact_versions_artefact_version_id_(self, request: operations.GetOrgsOrgIDArtefactVersionsArtefactVersionIDRequest) -> operations.GetOrgsOrgIDArtefactVersionsArtefactVersionIDResponse:
        r"""Get an Artefacts Versions.
        Returns a specific Artefact Version.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDArtefactVersionsArtefactVersionIDRequest, base_url, '/orgs/{orgId}/artefact-versions/{artefactVersionId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDArtefactVersionsArtefactVersionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ArtefactVersionResponse])
                res.artefact_version_response = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def get_orgs_org_id_artefacts_artefact_id_versions(self, request: operations.GetOrgsOrgIDArtefactsArtefactIDVersionsRequest) -> operations.GetOrgsOrgIDArtefactsArtefactIDVersionsResponse:
        r"""List all Artefact Versions of an Artefact.
        Returns the Artefact Versions of a specified Artefact registered with your organization. If no elements are found, an empty list is returned.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDArtefactsArtefactIDVersionsRequest, base_url, '/orgs/{orgId}/artefacts/{artefactId}/versions', request)
        
        query_params = utils.get_query_params(operations.GetOrgsOrgIDArtefactsArtefactIDVersionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDArtefactsArtefactIDVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ArtefactVersionResponse]])
                res.artefact_version_responses = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def patch_orgs_org_id_artefacts_artefact_id_versions_version_id_(self, request: operations.PatchOrgsOrgIDArtefactsArtefactIDVersionsVersionIDRequest) -> operations.PatchOrgsOrgIDArtefactsArtefactIDVersionsVersionIDResponse:
        r"""Update Version of an Artefact.
        Update the version of a specified Artefact registered with your organization\".
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOrgsOrgIDArtefactsArtefactIDVersionsVersionIDRequest, base_url, '/orgs/{orgId}/artefacts/{artefactId}/versions/{versionId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_artefact_version_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOrgsOrgIDArtefactsArtefactIDVersionsVersionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ArtefactVersionResponse])
                res.artefact_version_response = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    
    def post_orgs_org_id_artefact_versions(self, request: operations.PostOrgsOrgIDArtefactVersionsRequest) -> operations.PostOrgsOrgIDArtefactVersionsResponse:
        r"""Register a new Artefact Version with your organization."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDArtefactVersionsRequest, base_url, '/orgs/{orgId}/artefact-versions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_artefact_version_payload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostOrgsOrgIDArtefactVersionsRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDArtefactVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ArtefactVersionResponse])
                res.artefact_version_response = out
        elif http_res.status_code in [400, 401]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HumanitecErrorResponse])
                res.humanitec_error_response = out

        return res

    