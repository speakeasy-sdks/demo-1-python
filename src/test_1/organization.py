"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from test_1.models import operations, shared
from typing import Optional

class Organization:
    r"""An Organization is the top level object in Humanitec. All other objects belong to an Organization.
    <SchemaDefinition schemaRef=\"#/components/schemas/OrganizationRequest\" />
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def get_orgs(self) -> operations.GetOrgsResponse:
        r"""List active organizations the user has access to."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/orgs'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OrganizationResponse]])
                res.organization_responses = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    
    def get_orgs_org_id_(self, request: operations.GetOrgsOrgIDRequest) -> operations.GetOrgsOrgIDResponse:
        r"""Get the specified Organization."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDRequest, base_url, '/orgs/{orgId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrganizationResponse])
                res.organization_response = out
        elif http_res.status_code in [400, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorInfoResponse])
                res.error_info_response = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    