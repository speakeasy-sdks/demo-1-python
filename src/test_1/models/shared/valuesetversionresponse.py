"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import jsonpatchresponse as shared_jsonpatchresponse
from ..shared import valueresponse as shared_valueresponse
from ..shared import valuesetversionresultof as shared_valuesetversionresultof
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from test_1 import utils


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ValueSetVersionResponse:
    r"""A Value Set Version can be used as a track record of Shared Values changes, to restore a previous version of a Shared Value or Value Set, or to purge a Shared Value if it shouldn't be accessible anymore."""
    change: list[shared_jsonpatchresponse.JSONPatchResponse] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('change') }})
    comment: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment') }})
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    created_by: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    result_of: shared_valuesetversionresultof.ValueSetVersionResultOf = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result_of') }})
    source_value_set_version_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_value_set_version_id') }})
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    values: dict[str, shared_valueresponse.ValueResponse] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('values') }})
    

