"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from test_1 import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class MatchingCriteriaResponse:
    r"""Matching Criteria are a set of rules used to choose which Resource Definition to use to provision a particular Resource Type.
    
    Matching criteria are made up in order of specificity with least specific first:
    
    - Environment Type (`env_type`)
    
    - Application (`app_id`)
    
    - Environment (`env_id`)
    
    - Resource (`res_id`)
    
    When selecting matching criteria, the most specific one is selected. In general, this means of all the Matching Criteria fully matching the context, the Matching Criteria Rule with the most specific element filled is chosen. If there is a tie, the next most specific elements are compared and so on until one is chosen.
    
    **NOTE:**
    
    Humanitec will reject the registration of matching criteria rules that duplicate rules already present for a Resource Type.
    """
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Matching Criteria ID"""
    app_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_id'), 'exclude': lambda f: f is None }})
    r"""(Optional) The ID of the Application that the Resources should belong to."""
    env_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('env_id'), 'exclude': lambda f: f is None }})
    r"""(Optional) The ID of the Environment that the Resources should belong to. If `env_type` is also set, it must match the Type of the Environment for the Criteria to match."""
    env_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('env_type'), 'exclude': lambda f: f is None }})
    r"""(Optional) The Type of the Environment that the Resources should belong to. If `env_id` is also set, it must have an Environment Type that matches this parameter for the Criteria to match."""
    res_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('res_id'), 'exclude': lambda f: f is None }})
    r"""(Optional) The ID of the Resource in the Deployment Set. The ID is normally a `.` separated path to the definition in the set, e.g. `modules.my-module.externals.my-database`."""
    

