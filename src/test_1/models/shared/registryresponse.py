"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import clustersecretresponse as shared_clustersecretresponse
from dataclasses_json import Undefined, dataclass_json
from test_1 import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class RegistryResponse:
    r"""Humanitec can be used to manage registry credentials. The Registry object represents how to match credentials to a particular registry.
    
    Humanitec supports all Docker compatible registries as well as the custom authentication formats used by AWS Elastic Container Registry and Google Container Registry. It also supports the injection of a specific secret to be copied from an existing namespace in the cluster.
    """
    enable_ci: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable_ci') }})
    r"""Indicates if registry secrets and credentials should be exposed to CI agents."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Registry ID, unique within the Organization."""
    registry: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registry') }})
    r"""Registry name, usually in a \\"{domain}\\" or \\"{domain}/{project}\\" format."""
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Registry type, describes the registry authentication method, and defines the schema for the credentials.
    
    Supported values:
    
    - `public`
    
    - `basic`
    
    - `google_gcr`
    
    - `amazon_ecr`
    
    - `secret_ref`
    """
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""The timestamp of when this record was created."""
    created_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by'), 'exclude': lambda f: f is None }})
    r"""The user who created this record."""
    secrets: Optional[dict[str, shared_clustersecretresponse.ClusterSecretResponse]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secrets'), 'exclude': lambda f: f is None }})
    r"""ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters."""
    

