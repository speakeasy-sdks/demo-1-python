"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import artefactversionresponse as shared_artefactversionresponse
from ..shared import humanitecerrorresponse as shared_humanitecerrorresponse
from typing import Optional



@dataclasses.dataclass
class GetOrgsOrgIDArtefactsArtefactIDVersionsRequest:
    artefact_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'artefactId', 'style': 'simple', 'explode': False }})
    r"""The Artefact ID."""
    org_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'orgId', 'style': 'simple', 'explode': False }})
    r"""The organization ID."""
    archived: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'archived', 'style': 'form', 'explode': True }})
    r"""(Optional) Filter for non-archived Artefact Versions. If no filter is defined only non-archived Artefact Versions are returned, if the filter is true both archived and non-archived Versions are returned."""
    limit: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""(Optional) Limit the number of versions returned by the endpoint."""
    reference: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'reference', 'style': 'form', 'explode': True }})
    r"""(Optional) Filter Artefact Versions by by name including a version or digest."""
    




@dataclasses.dataclass
class GetOrgsOrgIDArtefactsArtefactIDVersionsResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    artefact_version_responses: Optional[list[shared_artefactversionresponse.ArtefactVersionResponse]] = dataclasses.field(default=None)
    r"""Returns all Versions of the specified Artefact."""
    humanitec_error_response: Optional[shared_humanitecerrorresponse.HumanitecErrorResponse] = dataclasses.field(default=None)
    r"""Invalid inputs provided."""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    

