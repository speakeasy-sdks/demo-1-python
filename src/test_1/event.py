"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from test_1.models import operations, shared
from typing import Optional

class Event:
    r"""Webhook is a special type of a Job, it performs a HTTPS request to a specified URL with specified headers.
    <SchemaDefinition schemaRef=\"#/components/schemas/WebhookRequest\" />
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def delete_orgs_org_id_apps_app_id_jobs(self, request: operations.DeleteOrgsOrgIDAppsAppIDJobsRequest) -> operations.DeleteOrgsOrgIDAppsAppIDJobsResponse:
        r"""Deletes all Jobs for the Application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDJobsRequest, base_url, '/orgs/{orgId}/apps/{appId}/jobs', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDJobsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def delete_orgs_org_id_apps_app_id_webhooks_job_id_(self, request: operations.DeleteOrgsOrgIDAppsAppIDWebhooksJobIDRequest) -> operations.DeleteOrgsOrgIDAppsAppIDWebhooksJobIDResponse:
        r"""Delete a Webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrgsOrgIDAppsAppIDWebhooksJobIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/webhooks/{jobId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrgsOrgIDAppsAppIDWebhooksJobIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def get_orgs_org_id_apps_app_id_webhooks(self, request: operations.GetOrgsOrgIDAppsAppIDWebhooksRequest) -> operations.GetOrgsOrgIDAppsAppIDWebhooksResponse:
        r"""List Webhooks"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDWebhooksRequest, base_url, '/orgs/{orgId}/apps/{appId}/webhooks', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.WebhookResponse]])
                res.webhook_responses = out

        return res

    
    def get_orgs_org_id_apps_app_id_webhooks_job_id_(self, request: operations.GetOrgsOrgIDAppsAppIDWebhooksJobIDRequest) -> operations.GetOrgsOrgIDAppsAppIDWebhooksJobIDResponse:
        r"""Get a Webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDAppsAppIDWebhooksJobIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/webhooks/{jobId}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDAppsAppIDWebhooksJobIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WebhookResponse])
                res.webhook_response = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def get_orgs_org_id_events(self, request: operations.GetOrgsOrgIDEventsRequest) -> operations.GetOrgsOrgIDEventsResponse:
        r"""List Events"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgsOrgIDEventsRequest, base_url, '/orgs/{orgId}/events', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgsOrgIDEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.EventResponse]])
                res.event_responses = out

        return res

    
    def post_orgs_org_id_apps_app_id_webhooks(self, request: operations.PostOrgsOrgIDAppsAppIDWebhooksRequest) -> operations.PostOrgsOrgIDAppsAppIDWebhooksResponse:
        r"""Create a new Webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDWebhooksRequest, base_url, '/orgs/{orgId}/apps/{appId}/webhooks', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "webhook_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WebhookResponse])
                res.webhook_response = out
        elif http_res.status_code in [400, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorInfoResponse])
                res.error_info_response = out
        elif http_res.status_code == 422:
            pass

        return res

    
    def post_orgs_org_id_apps_app_id_webhooks_job_id_(self, request: operations.PostOrgsOrgIDAppsAppIDWebhooksJobIDRequest) -> operations.PostOrgsOrgIDAppsAppIDWebhooksJobIDResponse:
        r"""Update a Webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrgsOrgIDAppsAppIDWebhooksJobIDRequest, base_url, '/orgs/{orgId}/apps/{appId}/webhooks/{jobId}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "webhook_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrgsOrgIDAppsAppIDWebhooksJobIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WebhookResponse])
                res.webhook_response = out
        elif http_res.status_code in [404, 422]:
            pass

        return res

    